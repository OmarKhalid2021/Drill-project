
drill_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e4  080069e4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069ec  080069ec  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069ec  080069ec  000079ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069f0  080069f0  000079f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080069f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000060  08006a54  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08006a54  00008614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3a2  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206b  00000000  00000000  00016432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000184a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b87  00000000  00000000  00019348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e18  00000000  00000000  00019ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118e3  00000000  00000000  00031ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099dbc  00000000  00000000  000435ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  000dd3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e14ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c28 	.word	0x08005c28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08005c28 	.word	0x08005c28

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b96a 	b.w	8000e10 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14e      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b60:	4694      	mov	ip, r2
 8000b62:	458c      	cmp	ip, r1
 8000b64:	4686      	mov	lr, r0
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	d962      	bls.n	8000c32 <__udivmoddi4+0xde>
 8000b6c:	b14a      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b6e:	f1c2 0320 	rsb	r3, r2, #32
 8000b72:	4091      	lsls	r1, r2
 8000b74:	fa20 f303 	lsr.w	r3, r0, r3
 8000b78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7c:	4319      	orrs	r1, r3
 8000b7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b86:	fa1f f68c 	uxth.w	r6, ip
 8000b8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b92:	fb07 1114 	mls	r1, r7, r4, r1
 8000b96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b9a:	fb04 f106 	mul.w	r1, r4, r6
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000baa:	f080 8112 	bcs.w	8000dd2 <__udivmoddi4+0x27e>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 810f 	bls.w	8000dd2 <__udivmoddi4+0x27e>
 8000bb4:	3c02      	subs	r4, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb00 f606 	mul.w	r6, r0, r6
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x94>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bda:	f080 80fc 	bcs.w	8000dd6 <__udivmoddi4+0x282>
 8000bde:	429e      	cmp	r6, r3
 8000be0:	f240 80f9 	bls.w	8000dd6 <__udivmoddi4+0x282>
 8000be4:	4463      	add	r3, ip
 8000be6:	3802      	subs	r0, #2
 8000be8:	1b9b      	subs	r3, r3, r6
 8000bea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bee:	2100      	movs	r1, #0
 8000bf0:	b11d      	cbz	r5, 8000bfa <__udivmoddi4+0xa6>
 8000bf2:	40d3      	lsrs	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d905      	bls.n	8000c0e <__udivmoddi4+0xba>
 8000c02:	b10d      	cbz	r5, 8000c08 <__udivmoddi4+0xb4>
 8000c04:	e9c5 0100 	strd	r0, r1, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e7f5      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c0e:	fab3 f183 	clz	r1, r3
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d146      	bne.n	8000ca4 <__udivmoddi4+0x150>
 8000c16:	42a3      	cmp	r3, r4
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xcc>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f0c0 80f0 	bcc.w	8000e00 <__udivmoddi4+0x2ac>
 8000c20:	1a86      	subs	r6, r0, r2
 8000c22:	eb64 0303 	sbc.w	r3, r4, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d0e6      	beq.n	8000bfa <__udivmoddi4+0xa6>
 8000c2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c30:	e7e3      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	f040 8090 	bne.w	8000d58 <__udivmoddi4+0x204>
 8000c38:	eba1 040c 	sub.w	r4, r1, ip
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa1f f78c 	uxth.w	r7, ip
 8000c44:	2101      	movs	r1, #1
 8000c46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c56:	fb07 f006 	mul.w	r0, r7, r6
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x11c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x11a>
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2b4>
 8000c6e:	4626      	mov	r6, r4
 8000c70:	1a1c      	subs	r4, r3, r0
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb00 f707 	mul.w	r7, r0, r7
 8000c86:	429f      	cmp	r7, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x148>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x146>
 8000c94:	429f      	cmp	r7, r3
 8000c96:	f200 80b0 	bhi.w	8000dfa <__udivmoddi4+0x2a6>
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	1bdb      	subs	r3, r3, r7
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0x9c>
 8000ca4:	f1c1 0620 	rsb	r6, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb8:	ea43 030c 	orr.w	r3, r3, ip
 8000cbc:	40f4      	lsrs	r4, r6
 8000cbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000cc2:	0c38      	lsrs	r0, r7, #16
 8000cc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cdc:	45a1      	cmp	r9, r4
 8000cde:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x1a6>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cea:	f080 8084 	bcs.w	8000df6 <__udivmoddi4+0x2a2>
 8000cee:	45a1      	cmp	r9, r4
 8000cf0:	f240 8081 	bls.w	8000df6 <__udivmoddi4+0x2a2>
 8000cf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	eba4 0409 	sub.w	r4, r4, r9
 8000cfe:	fa1f f983 	uxth.w	r9, r3
 8000d02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d06:	fb00 4413 	mls	r4, r0, r3, r4
 8000d0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d12:	45a4      	cmp	ip, r4
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x1d2>
 8000d16:	193c      	adds	r4, r7, r4
 8000d18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d1c:	d267      	bcs.n	8000dee <__udivmoddi4+0x29a>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	d965      	bls.n	8000dee <__udivmoddi4+0x29a>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d2e:	eba4 040c 	sub.w	r4, r4, ip
 8000d32:	429c      	cmp	r4, r3
 8000d34:	46ce      	mov	lr, r9
 8000d36:	469c      	mov	ip, r3
 8000d38:	d351      	bcc.n	8000dde <__udivmoddi4+0x28a>
 8000d3a:	d04e      	beq.n	8000dda <__udivmoddi4+0x286>
 8000d3c:	b155      	cbz	r5, 8000d54 <__udivmoddi4+0x200>
 8000d3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d42:	eb64 040c 	sbc.w	r4, r4, ip
 8000d46:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4a:	40cb      	lsrs	r3, r1
 8000d4c:	431e      	orrs	r6, r3
 8000d4e:	40cc      	lsrs	r4, r1
 8000d50:	e9c5 6400 	strd	r6, r4, [r5]
 8000d54:	2100      	movs	r1, #0
 8000d56:	e750      	b.n	8000bfa <__udivmoddi4+0xa6>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d64:	fa24 f303 	lsr.w	r3, r4, r3
 8000d68:	4094      	lsls	r4, r2
 8000d6a:	430c      	orrs	r4, r1
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d86:	fb00 f107 	mul.w	r1, r0, r7
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x24c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d96:	d22c      	bcs.n	8000df2 <__udivmoddi4+0x29e>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d92a      	bls.n	8000df2 <__udivmoddi4+0x29e>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4463      	add	r3, ip
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db0:	fb01 f307 	mul.w	r3, r1, r7
 8000db4:	42a3      	cmp	r3, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x276>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc0:	d213      	bcs.n	8000dea <__udivmoddi4+0x296>
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	d911      	bls.n	8000dea <__udivmoddi4+0x296>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	1ae4      	subs	r4, r4, r3
 8000dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd0:	e739      	b.n	8000c46 <__udivmoddi4+0xf2>
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	e6f0      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e706      	b.n	8000be8 <__udivmoddi4+0x94>
 8000dda:	45c8      	cmp	r8, r9
 8000ddc:	d2ae      	bcs.n	8000d3c <__udivmoddi4+0x1e8>
 8000dde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000de2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000de6:	3801      	subs	r0, #1
 8000de8:	e7a8      	b.n	8000d3c <__udivmoddi4+0x1e8>
 8000dea:	4631      	mov	r1, r6
 8000dec:	e7ed      	b.n	8000dca <__udivmoddi4+0x276>
 8000dee:	4603      	mov	r3, r0
 8000df0:	e799      	b.n	8000d26 <__udivmoddi4+0x1d2>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e7d4      	b.n	8000da0 <__udivmoddi4+0x24c>
 8000df6:	46d6      	mov	lr, sl
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1a6>
 8000dfa:	4463      	add	r3, ip
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	e74d      	b.n	8000c9c <__udivmoddi4+0x148>
 8000e00:	4606      	mov	r6, r0
 8000e02:	4623      	mov	r3, r4
 8000e04:	4608      	mov	r0, r1
 8000e06:	e70f      	b.n	8000c28 <__udivmoddi4+0xd4>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	e730      	b.n	8000c70 <__udivmoddi4+0x11c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f001 fcad 	bl	8002778 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f873 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 fa99 	bl	8001358 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e26:	f000 f8d9 	bl	8000fdc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e2a:	f000 f9f9 	bl	8001220 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e2e:	f000 f955 	bl	80010dc <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e32:	f000 f925 	bl	8001080 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e36:	f000 fa41 	bl	80012bc <MX_TIM3_Init>
//  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */
 /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE END 2 */
  uint8_t string[4]={0};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
SSD1306_Init();
 8000e3e:	f000 fffd 	bl	8001e3c <SSD1306_Init>
SSD1306_GotoXY(42,0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	202a      	movs	r0, #42	@ 0x2a
 8000e46:	f001 f963 	bl	8002110 <SSD1306_GotoXY>
SSD1306_Puts("MODE",&Font_11x18,1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4926      	ldr	r1, [pc, #152]	@ (8000ee8 <main+0xd4>)
 8000e4e:	4827      	ldr	r0, [pc, #156]	@ (8000eec <main+0xd8>)
 8000e50:	f001 f9f2 	bl	8002238 <SSD1306_Puts>
SSD1306_UpdateScreen();
 8000e54:	f001 f8b6 	bl	8001fc4 <SSD1306_UpdateScreen>
while (1)
{
	switch (check_power_button())
 8000e58:	f000 ff4e 	bl	8001cf8 <check_power_button>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d002      	beq.n	8000e68 <main+0x54>
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d03a      	beq.n	8000edc <main+0xc8>
        SSD1306_UpdateScreen();
        break;
	case ON:
		excute(ON,select_flag);
		break;
	default :break;
 8000e66:	e03e      	b.n	8000ee6 <main+0xd2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4820      	ldr	r0, [pc, #128]	@ (8000ef0 <main+0xdc>)
 8000e6e:	f002 fb75 	bl	800355c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <main+0xdc>)
 8000e78:	f002 fb70 	bl	800355c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	481d      	ldr	r0, [pc, #116]	@ (8000ef4 <main+0xe0>)
 8000e80:	f003 ff98 	bl	8004db4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <main+0xe4>)
 8000e86:	f003 fe5d 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
        check_botton();
 8000e8a:	f000 feeb 	bl	8001c64 <check_botton>
        Select(botton_flag);
 8000e8e:	481b      	ldr	r0, [pc, #108]	@ (8000efc <main+0xe8>)
 8000e90:	f000 fe66 	bl	8001b60 <Select>
        SSD1306_GotoXY(0, 23);
 8000e94:	2117      	movs	r1, #23
 8000e96:	2000      	movs	r0, #0
 8000e98:	f001 f93a 	bl	8002110 <SSD1306_GotoXY>
        SSD1306_Puts(modes[select_flag[0]],&Font_11x18,1);
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <main+0xec>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <main+0xf0>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	490f      	ldr	r1, [pc, #60]	@ (8000ee8 <main+0xd4>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 f9c3 	bl	8002238 <SSD1306_Puts>
        itoa(select_flag[1],string,10);
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <main+0xec>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	220a      	movs	r2, #10
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f004 fe43 	bl	8005b48 <itoa>
        SSD1306_GotoXY(58, 42);
 8000ec2:	212a      	movs	r1, #42	@ 0x2a
 8000ec4:	203a      	movs	r0, #58	@ 0x3a
 8000ec6:	f001 f923 	bl	8002110 <SSD1306_GotoXY>
        SSD1306_Puts(string,&Font_11x18,1);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4906      	ldr	r1, [pc, #24]	@ (8000ee8 <main+0xd4>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f9b1 	bl	8002238 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8000ed6:	f001 f875 	bl	8001fc4 <SSD1306_UpdateScreen>
        break;
 8000eda:	e004      	b.n	8000ee6 <main+0xd2>
		excute(ON,select_flag);
 8000edc:	4908      	ldr	r1, [pc, #32]	@ (8000f00 <main+0xec>)
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f000 fafe 	bl	80014e0 <excute>
		break;
 8000ee4:	bf00      	nop
	switch (check_power_button())
 8000ee6:	e7b7      	b.n	8000e58 <main+0x44>
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	08005c40 	.word	0x08005c40
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	2000012c 	.word	0x2000012c
 8000ef8:	200001bc 	.word	0x200001bc
 8000efc:	20000080 	.word	0x20000080
 8000f00:	20000084 	.word	0x20000084
 8000f04:	20000040 	.word	0x20000040

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fe5a 	bl	8005bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <SystemClock_Config+0xcc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f54:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f80:	2354      	movs	r3, #84	@ 0x54
 8000f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 f8e1 	bl	8004158 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f9c:	f000 ff48 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fb43 	bl	8004648 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc8:	f000 ff32 	bl	8001e30 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	@ 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <MX_ADC1_Init+0x98>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <MX_ADC1_Init+0x9c>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <MX_ADC1_Init+0x98>)
 8000ff6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_ADC1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_ADC1_Init+0x98>)
 800101e:	4a17      	ldr	r2, [pc, #92]	@ (800107c <MX_ADC1_Init+0xa0>)
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <MX_ADC1_Init+0x98>)
 800102a:	2201      	movs	r2, #1
 800102c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <MX_ADC1_Init+0x98>)
 800103e:	f001 fc31 	bl	80028a4 <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 fef2 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001054:	2307      	movs	r3, #7
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_ADC1_Init+0x98>)
 800105e:	f001 fdb1 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001068:	f000 fee2 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000090 	.word	0x20000090
 8001078:	40012000 	.word	0x40012000
 800107c:	0f000001 	.word	0x0f000001

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f002 fa7f 	bl	80035c0 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 feb2 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000d8 	.word	0x200000d8
 80010d4:	40005400 	.word	0x40005400
 80010d8:	00061a80 	.word	0x00061a80

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b096      	sub	sp, #88	@ 0x58
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fd5b 	bl	8005bd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111a:	4b3e      	ldr	r3, [pc, #248]	@ (8001214 <MX_TIM1_Init+0x138>)
 800111c:	4a3e      	ldr	r2, [pc, #248]	@ (8001218 <MX_TIM1_Init+0x13c>)
 800111e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001120:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001122:	2254      	movs	r2, #84	@ 0x54
 8001124:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <MX_TIM1_Init+0x138>)
 800112e:	22ff      	movs	r2, #255	@ 0xff
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <MX_TIM1_Init+0x138>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	4833      	ldr	r0, [pc, #204]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001146:	f003 fc4b 	bl	80049e0 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001150:	f000 fe6e 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115e:	4619      	mov	r1, r3
 8001160:	482c      	ldr	r0, [pc, #176]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001162:	f004 f83d 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800116c:	f000 fe60 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001170:	4828      	ldr	r0, [pc, #160]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001172:	f003 fd16 	bl	8004ba2 <HAL_TIM_PWM_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800117c:	f000 fe58 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800118c:	4619      	mov	r1, r3
 800118e:	4821      	ldr	r0, [pc, #132]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001190:	f004 fbee 	bl	8005970 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800119a:	f000 fe49 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	@ 0x60
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = PWM_value;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_TIM1_Init+0x140>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4813      	ldr	r0, [pc, #76]	@ (8001214 <MX_TIM1_Init+0x138>)
 80011c6:	f003 ff49 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011d0:	f000 fe2e 	bl	8001e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <MX_TIM1_Init+0x138>)
 80011f8:	f004 fc28 	bl	8005a4c <HAL_TIMEx_ConfigBreakDeadTime>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001202:	f000 fe15 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <MX_TIM1_Init+0x138>)
 8001208:	f001 f9e4 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 800120c:	bf00      	nop
 800120e:	3758      	adds	r7, #88	@ 0x58
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000012c 	.word	0x2000012c
 8001218:	40010000 	.word	0x40010000
 800121c:	20000009 	.word	0x20000009

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
// timer 2 the clock source is
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM2_Init+0x98>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_TIM2_Init+0x98>)
 8001246:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800124a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_TIM2_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM2_Init+0x98>)
 8001254:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM2_Init+0x98>)
 8001262:	2280      	movs	r2, #128	@ 0x80
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	@ (80012b8 <MX_TIM2_Init+0x98>)
 8001268:	f003 fbba 	bl	80049e0 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001272:	f000 fddd 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_TIM2_Init+0x98>)
 8001284:	f003 ffac 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800128e:	f000 fdcf 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_TIM2_Init+0x98>)
 80012a0:	f004 fb66 	bl	8005970 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012aa:	f000 fdc1 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000174 	.word	0x20000174

080012bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <MX_TIM3_Init+0x98>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012e0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_TIM3_Init+0x94>)
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001300:	4813      	ldr	r0, [pc, #76]	@ (8001350 <MX_TIM3_Init+0x94>)
 8001302:	f003 fb6d 	bl	80049e0 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800130c:	f000 fd90 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <MX_TIM3_Init+0x94>)
 800131e:	f003 ff5f 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 fd82 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_TIM3_Init+0x94>)
 800133a:	f004 fb19 	bl	8005970 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 fd74 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200001bc 	.word	0x200001bc
 8001354:	40000400 	.word	0x40000400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <MX_GPIO_Init+0xbc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <MX_GPIO_Init+0xbc>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_GPIO_Init+0xbc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_GPIO_Init+0xbc>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <MX_GPIO_Init+0xbc>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <MX_GPIO_Init+0xbc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	481b      	ldr	r0, [pc, #108]	@ (8001418 <MX_GPIO_Init+0xc0>)
 80013ac:	f002 f8d6 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2130      	movs	r1, #48	@ 0x30
 80013b4:	4819      	ldr	r0, [pc, #100]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013b6:	f002 f8d1 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin button_4_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin|button_4_Pin;
 80013ba:	2378      	movs	r3, #120	@ 0x78
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	4812      	ldr	r0, [pc, #72]	@ (8001418 <MX_GPIO_Init+0xc0>)
 80013ce:	f001 ff29 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	480b      	ldr	r0, [pc, #44]	@ (8001418 <MX_GPIO_Init+0xc0>)
 80013ea:	f001 ff1b 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013ee:	2330      	movs	r3, #48	@ 0x30
 80013f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_GPIO_Init+0xc4>)
 8001406:	f001 ff0d 	bl	8003224 <HAL_GPIO_Init>
//  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400

08001420 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001430:	d12c      	bne.n	800148c <HAL_TIM_PeriodElapsedCallback+0x6c>
	  HAL_ADC_Start(&hadc1);
 8001432:	481e      	ldr	r0, [pc, #120]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001434:	f001 fa7a 	bl	800292c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8001438:	2114      	movs	r1, #20
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800143c:	f001 fb2a 	bl	8002a94 <HAL_ADC_PollForConversion>
	  uint16_t value= HAL_ADC_GetValue(&hadc1);
 8001440:	481a      	ldr	r0, [pc, #104]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001442:	f001 fbb2 	bl	8002baa <HAL_ADC_GetValue>
 8001446:	4603      	mov	r3, r0
 8001448:	81fb      	strh	r3, [r7, #14]
	  f_value=(value/4096.0)*Vref;
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f815 	bl	800047c <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001458:	f7ff f9a4 	bl	80007a4 <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f807 	bl	800047c <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7ff f86b 	bl	8000550 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff faff 	bl	8000a84 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800148a:	6013      	str	r3, [r2, #0]
  }
  if (htim->Instance == TIM3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d105      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x82>
  {
	  timer_counter++;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014a0:	701a      	strb	r2, [r3, #0]
  }
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdb0      	pop	{r4, r5, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000090 	.word	0x20000090
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000007c 	.word	0x2000007c
 80014bc:	40000400 	.word	0x40000400
 80014c0:	20000086 	.word	0x20000086

080014c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
//            	}
//            }
//            break;
//        }
//    }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	0000      	movs	r0, r0
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <excute>:


/* USER CODE END 4 */
void excute (uint8_t P_flag,uint8_t *S_flag)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
static uint8_t direction =forward;
static uint8_t cont =0;
// forward ---> PB4 +     PB5-
// reverse ---> PB4 -     PB5+

    if (P_flag == ON)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 832d 	bne.w	8001b4e <excute+0x66e>
    {
    		// ***************************forward direction ***********************
    	motor_direction(direction,Speed);
 80014f4:	4bb4      	ldr	r3, [pc, #720]	@ (80017c8 <excute+0x2e8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4ab4      	ldr	r2, [pc, #720]	@ (80017cc <excute+0x2ec>)
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc42 	bl	8001d88 <motor_direction>
    		switch (S_flag[0])
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b03      	cmp	r3, #3
 800150a:	f200 831f 	bhi.w	8001b4c <excute+0x66c>
 800150e:	a201      	add	r2, pc, #4	@ (adr r2, 8001514 <excute+0x34>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001525 	.word	0x08001525
 8001518:	080017e9 	.word	0x080017e9
 800151c:	08001865 	.word	0x08001865
 8001520:	08001b27 	.word	0x08001b27
    		{
    		case mode_0:
    			HAL_TIM_Base_Start_IT(&htim2);
 8001524:	48aa      	ldr	r0, [pc, #680]	@ (80017d0 <excute+0x2f0>)
 8001526:	f003 faab 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    			switch (S_flag[1])
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b03      	cmp	r3, #3
 8001532:	f200 813e 	bhi.w	80017b2 <excute+0x2d2>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <excute+0x5c>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	080015e5 	.word	0x080015e5
 8001544:	0800167d 	.word	0x0800167d
 8001548:	0800171b 	.word	0x0800171b
    			    	{
				case mode_0:
					if (f_value >= 0.5 || cont==1)
 800154c:	4ba1      	ldr	r3, [pc, #644]	@ (80017d4 <excute+0x2f4>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	da03      	bge.n	8001568 <excute+0x88>
 8001560:	4b9d      	ldr	r3, [pc, #628]	@ (80017d8 <excute+0x2f8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d12e      	bne.n	80015c6 <excute+0xe6>
					{
						if (timer_counter<= 10)
 8001568:	4b9c      	ldr	r3, [pc, #624]	@ (80017dc <excute+0x2fc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b0a      	cmp	r3, #10
 800156e:	d813      	bhi.n	8001598 <excute+0xb8>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 8001570:	489b      	ldr	r0, [pc, #620]	@ (80017e0 <excute+0x300>)
 8001572:	f003 fa85 	bl	8004a80 <HAL_TIM_Base_Start_IT>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2110      	movs	r1, #16
 800157a:	489a      	ldr	r0, [pc, #616]	@ (80017e4 <excute+0x304>)
 800157c:	f001 ffee 	bl	800355c <HAL_GPIO_WritePin>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	4897      	ldr	r0, [pc, #604]	@ (80017e4 <excute+0x304>)
 8001586:	f001 ffe9 	bl	800355c <HAL_GPIO_WritePin>
	        				cont=1;
 800158a:	4b93      	ldr	r3, [pc, #588]	@ (80017d8 <excute+0x2f8>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	        				direction=stop;
 8001590:	4b8d      	ldr	r3, [pc, #564]	@ (80017c8 <excute+0x2e8>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 8001596:	e024      	b.n	80015e2 <excute+0x102>
						}
						else
						{
							HAL_TIM_Base_Stop_IT(&htim3);
 8001598:	4891      	ldr	r0, [pc, #580]	@ (80017e0 <excute+0x300>)
 800159a:	f003 fad3 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2110      	movs	r1, #16
 80015a2:	4890      	ldr	r0, [pc, #576]	@ (80017e4 <excute+0x304>)
 80015a4:	f001 ffda 	bl	800355c <HAL_GPIO_WritePin>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2120      	movs	r1, #32
 80015ac:	488d      	ldr	r0, [pc, #564]	@ (80017e4 <excute+0x304>)
 80015ae:	f001 ffd5 	bl	800355c <HAL_GPIO_WritePin>
		        			cont=0;
 80015b2:	4b89      	ldr	r3, [pc, #548]	@ (80017d8 <excute+0x2f8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
		        			direction=forward;
 80015b8:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <excute+0x2e8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
		        			timer_counter=0;
 80015be:	4b87      	ldr	r3, [pc, #540]	@ (80017dc <excute+0x2fc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 80015c4:	e00d      	b.n	80015e2 <excute+0x102>
						}
					}
    		    	else
    		    	{
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	4886      	ldr	r0, [pc, #536]	@ (80017e4 <excute+0x304>)
 80015cc:	f001 ffc6 	bl	800355c <HAL_GPIO_WritePin>
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2120      	movs	r1, #32
 80015d4:	4883      	ldr	r0, [pc, #524]	@ (80017e4 <excute+0x304>)
 80015d6:	f001 ffc1 	bl	800355c <HAL_GPIO_WritePin>
	        			direction=forward;
 80015da:	4b7b      	ldr	r3, [pc, #492]	@ (80017c8 <excute+0x2e8>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
    		    	}

					break;
 80015e0:	e0e8      	b.n	80017b4 <excute+0x2d4>
 80015e2:	e0e7      	b.n	80017b4 <excute+0x2d4>
				case mode_1:
					if (f_value >= 1 || cont==1)
 80015e4:	4b7b      	ldr	r3, [pc, #492]	@ (80017d4 <excute+0x2f4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	da03      	bge.n	8001600 <excute+0x120>
 80015f8:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <excute+0x2f8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d12e      	bne.n	800165e <excute+0x17e>
					{
						if (timer_counter<= 10)
 8001600:	4b76      	ldr	r3, [pc, #472]	@ (80017dc <excute+0x2fc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b0a      	cmp	r3, #10
 8001606:	d813      	bhi.n	8001630 <excute+0x150>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 8001608:	4875      	ldr	r0, [pc, #468]	@ (80017e0 <excute+0x300>)
 800160a:	f003 fa39 	bl	8004a80 <HAL_TIM_Base_Start_IT>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2110      	movs	r1, #16
 8001612:	4874      	ldr	r0, [pc, #464]	@ (80017e4 <excute+0x304>)
 8001614:	f001 ffa2 	bl	800355c <HAL_GPIO_WritePin>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4871      	ldr	r0, [pc, #452]	@ (80017e4 <excute+0x304>)
 800161e:	f001 ff9d 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=stop;
 8001622:	4b69      	ldr	r3, [pc, #420]	@ (80017c8 <excute+0x2e8>)
 8001624:	2202      	movs	r2, #2
 8001626:	701a      	strb	r2, [r3, #0]
		        			cont=1;
 8001628:	4b6b      	ldr	r3, [pc, #428]	@ (80017d8 <excute+0x2f8>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 800162e:	e024      	b.n	800167a <excute+0x19a>
						}
						else
						{
							HAL_TIM_Base_Stop_IT(&htim3);
 8001630:	486b      	ldr	r0, [pc, #428]	@ (80017e0 <excute+0x300>)
 8001632:	f003 fa87 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2110      	movs	r1, #16
 800163a:	486a      	ldr	r0, [pc, #424]	@ (80017e4 <excute+0x304>)
 800163c:	f001 ff8e 	bl	800355c <HAL_GPIO_WritePin>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	4867      	ldr	r0, [pc, #412]	@ (80017e4 <excute+0x304>)
 8001646:	f001 ff89 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=forward;
 800164a:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <excute+0x2e8>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
		        			timer_counter=0;
 8001650:	4b62      	ldr	r3, [pc, #392]	@ (80017dc <excute+0x2fc>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
		        			cont=0;
 8001656:	4b60      	ldr	r3, [pc, #384]	@ (80017d8 <excute+0x2f8>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 800165c:	e00d      	b.n	800167a <excute+0x19a>
						}
					}
    		    	else
    		    	{
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	4860      	ldr	r0, [pc, #384]	@ (80017e4 <excute+0x304>)
 8001664:	f001 ff7a 	bl	800355c <HAL_GPIO_WritePin>
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2120      	movs	r1, #32
 800166c:	485d      	ldr	r0, [pc, #372]	@ (80017e4 <excute+0x304>)
 800166e:	f001 ff75 	bl	800355c <HAL_GPIO_WritePin>
	        			direction=forward;
 8001672:	4b55      	ldr	r3, [pc, #340]	@ (80017c8 <excute+0x2e8>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    		    	}

					break;
 8001678:	e09c      	b.n	80017b4 <excute+0x2d4>
 800167a:	e09b      	b.n	80017b4 <excute+0x2d4>
				case mode_2:
					if (f_value >= 1.59 || cont==1)
 800167c:	4b55      	ldr	r3, [pc, #340]	@ (80017d4 <excute+0x2f4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff0d 	bl	80004a0 <__aeabi_f2d>
 8001686:	a34e      	add	r3, pc, #312	@ (adr r3, 80017c0 <excute+0x2e0>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f9e6 	bl	8000a5c <__aeabi_dcmpge>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <excute+0x1be>
 8001696:	4b50      	ldr	r3, [pc, #320]	@ (80017d8 <excute+0x2f8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d12e      	bne.n	80016fc <excute+0x21c>
					{
						if (timer_counter<= 10)
 800169e:	4b4f      	ldr	r3, [pc, #316]	@ (80017dc <excute+0x2fc>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d813      	bhi.n	80016ce <excute+0x1ee>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 80016a6:	484e      	ldr	r0, [pc, #312]	@ (80017e0 <excute+0x300>)
 80016a8:	f003 f9ea 	bl	8004a80 <HAL_TIM_Base_Start_IT>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2110      	movs	r1, #16
 80016b0:	484c      	ldr	r0, [pc, #304]	@ (80017e4 <excute+0x304>)
 80016b2:	f001 ff53 	bl	800355c <HAL_GPIO_WritePin>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2120      	movs	r1, #32
 80016ba:	484a      	ldr	r0, [pc, #296]	@ (80017e4 <excute+0x304>)
 80016bc:	f001 ff4e 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=stop;
 80016c0:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <excute+0x2e8>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
		        			cont=1;
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <excute+0x2f8>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 80016cc:	e024      	b.n	8001718 <excute+0x238>
						}
						else
						{
							HAL_TIM_Base_Stop_IT(&htim3);
 80016ce:	4844      	ldr	r0, [pc, #272]	@ (80017e0 <excute+0x300>)
 80016d0:	f003 fa38 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2110      	movs	r1, #16
 80016d8:	4842      	ldr	r0, [pc, #264]	@ (80017e4 <excute+0x304>)
 80016da:	f001 ff3f 	bl	800355c <HAL_GPIO_WritePin>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	4840      	ldr	r0, [pc, #256]	@ (80017e4 <excute+0x304>)
 80016e4:	f001 ff3a 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=forward;
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <excute+0x2e8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
		        			timer_counter=0;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <excute+0x2fc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
		        			cont=0;
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <excute+0x2f8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 80016fa:	e00d      	b.n	8001718 <excute+0x238>
						}
					}
    		    	else
    		    	{
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2110      	movs	r1, #16
 8001700:	4838      	ldr	r0, [pc, #224]	@ (80017e4 <excute+0x304>)
 8001702:	f001 ff2b 	bl	800355c <HAL_GPIO_WritePin>
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2120      	movs	r1, #32
 800170a:	4836      	ldr	r0, [pc, #216]	@ (80017e4 <excute+0x304>)
 800170c:	f001 ff26 	bl	800355c <HAL_GPIO_WritePin>
	        			direction=forward;
 8001710:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <excute+0x2e8>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
    		    	}

					break;
 8001716:	e04d      	b.n	80017b4 <excute+0x2d4>
 8001718:	e04c      	b.n	80017b4 <excute+0x2d4>
				case mode_3:
					if (f_value >= 2 || cont==1)
 800171a:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <excute+0x2f4>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	da03      	bge.n	8001736 <excute+0x256>
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <excute+0x2f8>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d12e      	bne.n	8001794 <excute+0x2b4>
					{
						if (timer_counter<= 10)
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <excute+0x2fc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b0a      	cmp	r3, #10
 800173c:	d813      	bhi.n	8001766 <excute+0x286>
						{
							HAL_TIM_Base_Start_IT(&htim3);
 800173e:	4828      	ldr	r0, [pc, #160]	@ (80017e0 <excute+0x300>)
 8001740:	f003 f99e 	bl	8004a80 <HAL_TIM_Base_Start_IT>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2110      	movs	r1, #16
 8001748:	4826      	ldr	r0, [pc, #152]	@ (80017e4 <excute+0x304>)
 800174a:	f001 ff07 	bl	800355c <HAL_GPIO_WritePin>
	        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	4824      	ldr	r0, [pc, #144]	@ (80017e4 <excute+0x304>)
 8001754:	f001 ff02 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=stop;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <excute+0x2e8>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
		        			cont=1;
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <excute+0x2f8>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 8001764:	e024      	b.n	80017b0 <excute+0x2d0>
						}
						else
						{
							HAL_TIM_Base_Stop_IT(&htim3);
 8001766:	481e      	ldr	r0, [pc, #120]	@ (80017e0 <excute+0x300>)
 8001768:	f003 f9ec 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <excute+0x304>)
 8001772:	f001 fef3 	bl	800355c <HAL_GPIO_WritePin>
		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2120      	movs	r1, #32
 800177a:	481a      	ldr	r0, [pc, #104]	@ (80017e4 <excute+0x304>)
 800177c:	f001 feee 	bl	800355c <HAL_GPIO_WritePin>
		        			direction=forward;
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <excute+0x2e8>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
		        			timer_counter=0;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <excute+0x2fc>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
		        			cont=0;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <excute+0x2f8>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
						if (timer_counter<= 10)
 8001792:	e00d      	b.n	80017b0 <excute+0x2d0>
						}
					}
    		    	else
    		    	{
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2110      	movs	r1, #16
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <excute+0x304>)
 800179a:	f001 fedf 	bl	800355c <HAL_GPIO_WritePin>
        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <excute+0x304>)
 80017a4:	f001 feda 	bl	800355c <HAL_GPIO_WritePin>
	        			direction=forward;
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <excute+0x2e8>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
    		    	}

					break;
 80017ae:	e001      	b.n	80017b4 <excute+0x2d4>
 80017b0:	e000      	b.n	80017b4 <excute+0x2d4>
    			    	default :break;
 80017b2:	bf00      	nop
    			    	}
    			HAL_Delay(200);
 80017b4:	20c8      	movs	r0, #200	@ 0xc8
 80017b6:	f001 f851 	bl	800285c <HAL_Delay>
    			break;
 80017ba:	e1c8      	b.n	8001b4e <excute+0x66e>
 80017bc:	f3af 8000 	nop.w
 80017c0:	d70a3d71 	.word	0xd70a3d71
 80017c4:	3ff970a3 	.word	0x3ff970a3
 80017c8:	20000050 	.word	0x20000050
 80017cc:	20000051 	.word	0x20000051
 80017d0:	20000174 	.word	0x20000174
 80017d4:	2000007c 	.word	0x2000007c
 80017d8:	20000204 	.word	0x20000204
 80017dc:	20000086 	.word	0x20000086
 80017e0:	200001bc 	.word	0x200001bc
 80017e4:	40020400 	.word	0x40020400
    			case mode_1:// *************************** speed mode *****************************************
    				switch (S_flag[1])
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d836      	bhi.n	8001860 <excute+0x380>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <excute+0x318>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800181f 	.word	0x0800181f
 8001800:	08001835 	.word	0x08001835
 8001804:	0800184b 	.word	0x0800184b
    				    			    	{
    					case mode_0:
							SetMotorSpeed(speed_1);
 8001808:	2040      	movs	r0, #64	@ 0x40
 800180a:	f000 f9f9 	bl	8001c00 <SetMotorSpeed>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800180e:	2100      	movs	r1, #0
 8001810:	48b3      	ldr	r0, [pc, #716]	@ (8001ae0 <excute+0x600>)
 8001812:	f003 fa1f 	bl	8004c54 <HAL_TIM_PWM_Start>
							Speed = speed_1;
 8001816:	4bb3      	ldr	r3, [pc, #716]	@ (8001ae4 <excute+0x604>)
 8001818:	2240      	movs	r2, #64	@ 0x40
 800181a:	701a      	strb	r2, [r3, #0]
    				    	break;
 800181c:	e021      	b.n	8001862 <excute+0x382>
						case mode_1:
							SetMotorSpeed(speed_2);
 800181e:	2080      	movs	r0, #128	@ 0x80
 8001820:	f000 f9ee 	bl	8001c00 <SetMotorSpeed>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001824:	2100      	movs	r1, #0
 8001826:	48ae      	ldr	r0, [pc, #696]	@ (8001ae0 <excute+0x600>)
 8001828:	f003 fa14 	bl	8004c54 <HAL_TIM_PWM_Start>
							Speed = speed_2;
 800182c:	4bad      	ldr	r3, [pc, #692]	@ (8001ae4 <excute+0x604>)
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	701a      	strb	r2, [r3, #0]
							break;
 8001832:	e016      	b.n	8001862 <excute+0x382>
						case mode_2:
							SetMotorSpeed(speed_3);
 8001834:	20aa      	movs	r0, #170	@ 0xaa
 8001836:	f000 f9e3 	bl	8001c00 <SetMotorSpeed>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	48a8      	ldr	r0, [pc, #672]	@ (8001ae0 <excute+0x600>)
 800183e:	f003 fa09 	bl	8004c54 <HAL_TIM_PWM_Start>
							Speed = speed_3;
 8001842:	4ba8      	ldr	r3, [pc, #672]	@ (8001ae4 <excute+0x604>)
 8001844:	22aa      	movs	r2, #170	@ 0xaa
 8001846:	701a      	strb	r2, [r3, #0]
							break;
 8001848:	e00b      	b.n	8001862 <excute+0x382>
						case mode_3:
							SetMotorSpeed(speed_4);
 800184a:	20ff      	movs	r0, #255	@ 0xff
 800184c:	f000 f9d8 	bl	8001c00 <SetMotorSpeed>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	48a3      	ldr	r0, [pc, #652]	@ (8001ae0 <excute+0x600>)
 8001854:	f003 f9fe 	bl	8004c54 <HAL_TIM_PWM_Start>
							Speed = speed_4;
 8001858:	4ba2      	ldr	r3, [pc, #648]	@ (8001ae4 <excute+0x604>)
 800185a:	22ff      	movs	r2, #255	@ 0xff
 800185c:	701a      	strb	r2, [r3, #0]
							break;
 800185e:	e000      	b.n	8001862 <excute+0x382>

						default :break;
 8001860:	bf00      	nop
    				    			    	}
    				break;
 8001862:	e174      	b.n	8001b4e <excute+0x66e>
    				case mode_2: //****************************** torque reverse mode **********************************
    					HAL_TIM_Base_Start_IT(&htim2);
 8001864:	48a0      	ldr	r0, [pc, #640]	@ (8001ae8 <excute+0x608>)
 8001866:	f003 f90b 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    					switch (S_flag[1])
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b03      	cmp	r3, #3
 8001872:	f200 8156 	bhi.w	8001b22 <excute+0x642>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <excute+0x39c>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001925 	.word	0x08001925
 8001884:	080019bd 	.word	0x080019bd
 8001888:	08001a5b 	.word	0x08001a5b
    					{
    					case mode_0:
    						if (f_value >= 0.5 || cont==1)
 800188c:	4b97      	ldr	r3, [pc, #604]	@ (8001aec <excute+0x60c>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	da03      	bge.n	80018a8 <excute+0x3c8>
 80018a0:	4b93      	ldr	r3, [pc, #588]	@ (8001af0 <excute+0x610>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d12e      	bne.n	8001906 <excute+0x426>
    						{
    							if (timer_counter<= 10)
 80018a8:	4b92      	ldr	r3, [pc, #584]	@ (8001af4 <excute+0x614>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b0a      	cmp	r3, #10
 80018ae:	d813      	bhi.n	80018d8 <excute+0x3f8>
    							{
    								HAL_TIM_Base_Start_IT(&htim3);
 80018b0:	4891      	ldr	r0, [pc, #580]	@ (8001af8 <excute+0x618>)
 80018b2:	f003 f8e5 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2110      	movs	r1, #16
 80018ba:	4890      	ldr	r0, [pc, #576]	@ (8001afc <excute+0x61c>)
 80018bc:	f001 fe4e 	bl	800355c <HAL_GPIO_WritePin>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2120      	movs	r1, #32
 80018c4:	488d      	ldr	r0, [pc, #564]	@ (8001afc <excute+0x61c>)
 80018c6:	f001 fe49 	bl	800355c <HAL_GPIO_WritePin>
    			        			direction=reverse;
 80018ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001b00 <excute+0x620>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    			        			cont=1;
 80018d0:	4b87      	ldr	r3, [pc, #540]	@ (8001af0 <excute+0x610>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 80018d6:	e024      	b.n	8001922 <excute+0x442>
    							}
    							else
    							{
    								HAL_TIM_Base_Stop_IT(&htim3);
 80018d8:	4887      	ldr	r0, [pc, #540]	@ (8001af8 <excute+0x618>)
 80018da:	f003 f933 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	2110      	movs	r1, #16
 80018e2:	4886      	ldr	r0, [pc, #536]	@ (8001afc <excute+0x61c>)
 80018e4:	f001 fe3a 	bl	800355c <HAL_GPIO_WritePin>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2120      	movs	r1, #32
 80018ec:	4883      	ldr	r0, [pc, #524]	@ (8001afc <excute+0x61c>)
 80018ee:	f001 fe35 	bl	800355c <HAL_GPIO_WritePin>
        		        			direction=forward;
 80018f2:	4b83      	ldr	r3, [pc, #524]	@ (8001b00 <excute+0x620>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
        		        			timer_counter=0;
 80018f8:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <excute+0x614>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        		        			cont=0;
 80018fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <excute+0x610>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 8001904:	e00d      	b.n	8001922 <excute+0x442>
    							}
    						}
    	    		    	else
    	    		    	{
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	487c      	ldr	r0, [pc, #496]	@ (8001afc <excute+0x61c>)
 800190c:	f001 fe26 	bl	800355c <HAL_GPIO_WritePin>
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2120      	movs	r1, #32
 8001914:	4879      	ldr	r0, [pc, #484]	@ (8001afc <excute+0x61c>)
 8001916:	f001 fe21 	bl	800355c <HAL_GPIO_WritePin>
    		        			direction=forward;
 800191a:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <excute+0x620>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
    	    		    	}

    						break;
 8001920:	e100      	b.n	8001b24 <excute+0x644>
 8001922:	e0ff      	b.n	8001b24 <excute+0x644>
						case mode_1:
    						if (f_value >= 1 || cont==1)
 8001924:	4b71      	ldr	r3, [pc, #452]	@ (8001aec <excute+0x60c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	da03      	bge.n	8001940 <excute+0x460>
 8001938:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <excute+0x610>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d12e      	bne.n	800199e <excute+0x4be>
    						{
    							if (timer_counter<= 10)
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <excute+0x614>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b0a      	cmp	r3, #10
 8001946:	d813      	bhi.n	8001970 <excute+0x490>
    							{
    								HAL_TIM_Base_Start_IT(&htim3);
 8001948:	486b      	ldr	r0, [pc, #428]	@ (8001af8 <excute+0x618>)
 800194a:	f003 f899 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2110      	movs	r1, #16
 8001952:	486a      	ldr	r0, [pc, #424]	@ (8001afc <excute+0x61c>)
 8001954:	f001 fe02 	bl	800355c <HAL_GPIO_WritePin>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	2120      	movs	r1, #32
 800195c:	4867      	ldr	r0, [pc, #412]	@ (8001afc <excute+0x61c>)
 800195e:	f001 fdfd 	bl	800355c <HAL_GPIO_WritePin>
    			        			direction=reverse;
 8001962:	4b67      	ldr	r3, [pc, #412]	@ (8001b00 <excute+0x620>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    			        			cont=1;
 8001968:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <excute+0x610>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 800196e:	e024      	b.n	80019ba <excute+0x4da>
    							}
    							else
    							{
    								HAL_TIM_Base_Stop_IT(&htim3);
 8001970:	4861      	ldr	r0, [pc, #388]	@ (8001af8 <excute+0x618>)
 8001972:	f003 f8e7 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2110      	movs	r1, #16
 800197a:	4860      	ldr	r0, [pc, #384]	@ (8001afc <excute+0x61c>)
 800197c:	f001 fdee 	bl	800355c <HAL_GPIO_WritePin>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	485d      	ldr	r0, [pc, #372]	@ (8001afc <excute+0x61c>)
 8001986:	f001 fde9 	bl	800355c <HAL_GPIO_WritePin>
        		        			direction=forward;
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <excute+0x620>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
        		        			timer_counter=0;
 8001990:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <excute+0x614>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
        		        			cont=0;
 8001996:	4b56      	ldr	r3, [pc, #344]	@ (8001af0 <excute+0x610>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 800199c:	e00d      	b.n	80019ba <excute+0x4da>
    							}
    						}
    	    		    	else
    	    		    	{
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2110      	movs	r1, #16
 80019a2:	4856      	ldr	r0, [pc, #344]	@ (8001afc <excute+0x61c>)
 80019a4:	f001 fdda 	bl	800355c <HAL_GPIO_WritePin>
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2120      	movs	r1, #32
 80019ac:	4853      	ldr	r0, [pc, #332]	@ (8001afc <excute+0x61c>)
 80019ae:	f001 fdd5 	bl	800355c <HAL_GPIO_WritePin>
    		        			direction=forward;
 80019b2:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <excute+0x620>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
    	    		    	}

							break;
 80019b8:	e0b4      	b.n	8001b24 <excute+0x644>
 80019ba:	e0b3      	b.n	8001b24 <excute+0x644>
						case mode_2:
    						if (f_value >= 1.59 || cont==1)
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <excute+0x60c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd6d 	bl	80004a0 <__aeabi_f2d>
 80019c6:	a344      	add	r3, pc, #272	@ (adr r3, 8001ad8 <excute+0x5f8>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7ff f846 	bl	8000a5c <__aeabi_dcmpge>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <excute+0x4fe>
 80019d6:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <excute+0x610>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d12e      	bne.n	8001a3c <excute+0x55c>
    						{
    							if (timer_counter<= 10)
 80019de:	4b45      	ldr	r3, [pc, #276]	@ (8001af4 <excute+0x614>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	d813      	bhi.n	8001a0e <excute+0x52e>
    							{
    								HAL_TIM_Base_Start_IT(&htim3);
 80019e6:	4844      	ldr	r0, [pc, #272]	@ (8001af8 <excute+0x618>)
 80019e8:	f003 f84a 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2110      	movs	r1, #16
 80019f0:	4842      	ldr	r0, [pc, #264]	@ (8001afc <excute+0x61c>)
 80019f2:	f001 fdb3 	bl	800355c <HAL_GPIO_WritePin>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	4840      	ldr	r0, [pc, #256]	@ (8001afc <excute+0x61c>)
 80019fc:	f001 fdae 	bl	800355c <HAL_GPIO_WritePin>
    			        			direction=reverse;
 8001a00:	4b3f      	ldr	r3, [pc, #252]	@ (8001b00 <excute+0x620>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
    			        			cont=1;
 8001a06:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <excute+0x610>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 8001a0c:	e024      	b.n	8001a58 <excute+0x578>
    							}
    							else
    							{
    								HAL_TIM_Base_Stop_IT(&htim3);
 8001a0e:	483a      	ldr	r0, [pc, #232]	@ (8001af8 <excute+0x618>)
 8001a10:	f003 f898 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2110      	movs	r1, #16
 8001a18:	4838      	ldr	r0, [pc, #224]	@ (8001afc <excute+0x61c>)
 8001a1a:	f001 fd9f 	bl	800355c <HAL_GPIO_WritePin>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2120      	movs	r1, #32
 8001a22:	4836      	ldr	r0, [pc, #216]	@ (8001afc <excute+0x61c>)
 8001a24:	f001 fd9a 	bl	800355c <HAL_GPIO_WritePin>
        		        			direction=forward;
 8001a28:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <excute+0x620>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
        		        			timer_counter=0;
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <excute+0x614>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
        		        			cont=0;
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <excute+0x610>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 8001a3a:	e00d      	b.n	8001a58 <excute+0x578>
    							}
    						}
    	    		    	else
    	    		    	{
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2110      	movs	r1, #16
 8001a40:	482e      	ldr	r0, [pc, #184]	@ (8001afc <excute+0x61c>)
 8001a42:	f001 fd8b 	bl	800355c <HAL_GPIO_WritePin>
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2120      	movs	r1, #32
 8001a4a:	482c      	ldr	r0, [pc, #176]	@ (8001afc <excute+0x61c>)
 8001a4c:	f001 fd86 	bl	800355c <HAL_GPIO_WritePin>
    		        			direction=forward;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <excute+0x620>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    	    		    	}

							break;
 8001a56:	e065      	b.n	8001b24 <excute+0x644>
 8001a58:	e064      	b.n	8001b24 <excute+0x644>
						case mode_3:
    						if (f_value >= 2 || cont==1)
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <excute+0x60c>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	da03      	bge.n	8001a76 <excute+0x596>
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <excute+0x610>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d146      	bne.n	8001b04 <excute+0x624>
    						{
    							if (timer_counter<= 10)
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <excute+0x614>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d813      	bhi.n	8001aa6 <excute+0x5c6>
    							{
    								HAL_TIM_Base_Start_IT(&htim3);
 8001a7e:	481e      	ldr	r0, [pc, #120]	@ (8001af8 <excute+0x618>)
 8001a80:	f002 fffe 	bl	8004a80 <HAL_TIM_Base_Start_IT>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	481c      	ldr	r0, [pc, #112]	@ (8001afc <excute+0x61c>)
 8001a8a:	f001 fd67 	bl	800355c <HAL_GPIO_WritePin>
    		        				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2120      	movs	r1, #32
 8001a92:	481a      	ldr	r0, [pc, #104]	@ (8001afc <excute+0x61c>)
 8001a94:	f001 fd62 	bl	800355c <HAL_GPIO_WritePin>
    			        			direction=reverse;
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <excute+0x620>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
    			        			cont=1;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <excute+0x610>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 8001aa4:	e03c      	b.n	8001b20 <excute+0x640>
    							}
    							else
    							{
    								HAL_TIM_Base_Stop_IT(&htim3);
 8001aa6:	4814      	ldr	r0, [pc, #80]	@ (8001af8 <excute+0x618>)
 8001aa8:	f003 f84c 	bl	8004b44 <HAL_TIM_Base_Stop_IT>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4812      	ldr	r0, [pc, #72]	@ (8001afc <excute+0x61c>)
 8001ab2:	f001 fd53 	bl	800355c <HAL_GPIO_WritePin>
        		        			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2120      	movs	r1, #32
 8001aba:	4810      	ldr	r0, [pc, #64]	@ (8001afc <excute+0x61c>)
 8001abc:	f001 fd4e 	bl	800355c <HAL_GPIO_WritePin>
        		        			direction=forward;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <excute+0x620>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
        		        			timer_counter=0;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <excute+0x614>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
        		        			cont=0;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <excute+0x610>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
    							if (timer_counter<= 10)
 8001ad2:	e025      	b.n	8001b20 <excute+0x640>
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	d70a3d71 	.word	0xd70a3d71
 8001adc:	3ff970a3 	.word	0x3ff970a3
 8001ae0:	2000012c 	.word	0x2000012c
 8001ae4:	20000051 	.word	0x20000051
 8001ae8:	20000174 	.word	0x20000174
 8001aec:	2000007c 	.word	0x2000007c
 8001af0:	20000204 	.word	0x20000204
 8001af4:	20000086 	.word	0x20000086
 8001af8:	200001bc 	.word	0x200001bc
 8001afc:	40020400 	.word	0x40020400
 8001b00:	20000050 	.word	0x20000050
    							}
    						}
    	    		    	else
    	    		    	{
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2110      	movs	r1, #16
 8001b08:	4813      	ldr	r0, [pc, #76]	@ (8001b58 <excute+0x678>)
 8001b0a:	f001 fd27 	bl	800355c <HAL_GPIO_WritePin>
    	        		    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2120      	movs	r1, #32
 8001b12:	4811      	ldr	r0, [pc, #68]	@ (8001b58 <excute+0x678>)
 8001b14:	f001 fd22 	bl	800355c <HAL_GPIO_WritePin>
    		        			direction=forward;
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <excute+0x67c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
    	    		    	}

							break;
 8001b1e:	e001      	b.n	8001b24 <excute+0x644>
 8001b20:	e000      	b.n	8001b24 <excute+0x644>

						default :break;
 8001b22:	bf00      	nop
    					}
    					break;
 8001b24:	e013      	b.n	8001b4e <excute+0x66e>
    					case mode_3://***************************** additional mode **************************
    						switch (S_flag[1])
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d80b      	bhi.n	8001b48 <excute+0x668>
 8001b30:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <excute+0x658>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b49 	.word	0x08001b49
 8001b40:	08001b49 	.word	0x08001b49
 8001b44:	08001b49 	.word	0x08001b49
    			//			HAL_Delay(50);
    			//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
    			//			HAL_Delay(50);
    							break;

    						default :break;
 8001b48:	bf00      	nop
    						}
    						break;
 8001b4a:	e000      	b.n	8001b4e <excute+0x66e>
    						default :break;
 8001b4c:	bf00      	nop
    		}


//    	HAL_Delay(200);
    }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	20000050 	.word	0x20000050

08001b60 <Select>:
void Select (uint8_t *B_flag)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

    if (B_flag[1]==1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d111      	bne.n	8001b96 <Select+0x36>
    {
//		up selection
    	select_flag[1]++;
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <Select+0x9c>)
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <Select+0x9c>)
 8001b7c:	705a      	strb	r2, [r3, #1]
        if (select_flag[1]==4)
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <Select+0x9c>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d102      	bne.n	8001b8c <Select+0x2c>
        {
        	select_flag[1]=mode_0;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <Select+0x9c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	705a      	strb	r2, [r3, #1]
        }
        B_flag[1]=0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e015      	b.n	8001bc2 <Select+0x62>
    }
    else if (B_flag[2]==1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d110      	bne.n	8001bc2 <Select+0x62>
    {
//    	down selection
        if (select_flag[1]==0)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <Select+0x9c>)
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <Select+0x4e>
        {
        	select_flag[1]=4;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <Select+0x9c>)
 8001baa:	2204      	movs	r2, #4
 8001bac:	705a      	strb	r2, [r3, #1]
        }
        select_flag[1]--;
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <Select+0x9c>)
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <Select+0x9c>)
 8001bb8:	705a      	strb	r2, [r3, #1]
        B_flag[2]=0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
    }
//    selection button
		if (B_flag[0]==1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d112      	bne.n	8001bf0 <Select+0x90>
		    {
		//		up selection
			select_flag[0]++;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <Select+0x9c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <Select+0x9c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
		        if (select_flag[0]==4)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <Select+0x9c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d102      	bne.n	8001be4 <Select+0x84>
		        {
		        	select_flag[0]=mode_0;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <Select+0x9c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
		        }
		        select_flag[1]=mode_0;
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <Select+0x9c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
		        B_flag[0]=0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
	 *
	 * 		section of displaying oled selection
	 *
	 *
	 */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20000084 	.word	0x20000084

08001c00 <SetMotorSpeed>:
void SetMotorSpeed(uint32_t pulse)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	@ 0x60
 8001c1e:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;   // Inverted polarity
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Inverted polarity
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <SetMotorSpeed+0x60>)
 8001c42:	f003 fa0b 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SetMotorSpeed+0x50>
    {
        Error_Handler();
 8001c4c:	f000 f8f0 	bl	8001e30 <Error_Handler>
    }
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <SetMotorSpeed+0x60>)
 8001c54:	f002 fffe 	bl	8004c54 <HAL_TIM_PWM_Start>
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	@ 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000012c 	.word	0x2000012c

08001c64 <check_botton>:
void check_botton (void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 8001c6a:	f000 fdeb 	bl	8002844 <HAL_GetTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <check_botton+0x80>)
 8001c72:	6013      	str	r3, [r2, #0]
	for (uint8_t i =0;i<NUM_BUTTONS;i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	e02c      	b.n	8001cd4 <check_botton+0x70>
	{
	    if ((currentTime - lastDebounceTime[i]) > DEBOUNCE_DELAY) {
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <check_botton+0x80>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	79fa      	ldrb	r2, [r7, #7]
 8001c80:	4919      	ldr	r1, [pc, #100]	@ (8001ce8 <check_botton+0x84>)
 8001c82:	5c8a      	ldrb	r2, [r1, r2]
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c8a:	d920      	bls.n	8001cce <check_botton+0x6a>
	        lastDebounceTime[i] = currentTime;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <check_botton+0x80>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	b2d1      	uxtb	r1, r2
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <check_botton+0x84>)
 8001c96:	54d1      	strb	r1, [r2, r3]

		if (HAL_GPIO_ReadPin(GPIOA,buttonPins[i])==GPIO_PIN_RESET)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <check_botton+0x88>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4813      	ldr	r0, [pc, #76]	@ (8001cf0 <check_botton+0x8c>)
 8001ca2:	f001 fc43 	bl	800352c <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d110      	bne.n	8001cce <check_botton+0x6a>
		{
			botton_flag[i]=1;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <check_botton+0x90>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	54d1      	strb	r1, [r2, r3]
			while (1)
			{
				if (HAL_GPIO_ReadPin(GPIOA,buttonPins[i])==GPIO_PIN_SET)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <check_botton+0x88>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <check_botton+0x8c>)
 8001cbe:	f001 fc35 	bl	800352c <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d000      	beq.n	8001cca <check_botton+0x66>
 8001cc8:	e7f4      	b.n	8001cb4 <check_botton+0x50>
					break;
 8001cca:	bf00      	nop
			}
			break;
 8001ccc:	e006      	b.n	8001cdc <check_botton+0x78>
	for (uint8_t i =0;i<NUM_BUTTONS;i++)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d9cf      	bls.n	8001c7a <check_botton+0x16>
		}
	}
    }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000008c 	.word	0x2000008c
 8001ce8:	20000088 	.word	0x20000088
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	20000080 	.word	0x20000080

08001cf8 <check_power_button>:
uint8_t check_power_button (void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	static uint8_t state=0;
	currentTime = HAL_GetTick();
 8001cfc:	f000 fda2 	bl	8002844 <HAL_GetTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <check_power_button+0x78>)
 8001d04:	6013      	str	r3, [r2, #0]
	    if ((currentTime - lastDebounceTime[3]) > DEBOUNCE_DELAY) {
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <check_power_button+0x78>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <check_power_button+0x7c>)
 8001d0c:	78d2      	ldrb	r2, [r2, #3]
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d14:	d927      	bls.n	8001d66 <check_power_button+0x6e>
	        lastDebounceTime[3] = currentTime;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <check_power_button+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <check_power_button+0x7c>)
 8001d1e:	70da      	strb	r2, [r3, #3]

		if (HAL_GPIO_ReadPin(GPIOA,buttonPins[3])==GPIO_PIN_RESET)
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <check_power_button+0x80>)
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4815      	ldr	r0, [pc, #84]	@ (8001d7c <check_power_button+0x84>)
 8001d28:	f001 fc00 	bl	800352c <HAL_GPIO_ReadPin>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d119      	bne.n	8001d66 <check_power_button+0x6e>
		{
			botton_flag[3]=1;
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <check_power_button+0x88>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	70da      	strb	r2, [r3, #3]
			while (1)
			{
				if (HAL_GPIO_ReadPin(GPIOA,buttonPins[3])==GPIO_PIN_SET)
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <check_power_button+0x80>)
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480f      	ldr	r0, [pc, #60]	@ (8001d7c <check_power_button+0x84>)
 8001d40:	f001 fbf4 	bl	800352c <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d1f6      	bne.n	8001d38 <check_power_button+0x40>
				{
					state++;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <check_power_button+0x8c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <check_power_button+0x8c>)
 8001d54:	701a      	strb	r2, [r3, #0]
					if (state==3)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <check_power_button+0x8c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d102      	bne.n	8001d64 <check_power_button+0x6c>
						state=1;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <check_power_button+0x8c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
					break;
 8001d64:	bf00      	nop
				}
			}
		}
	}

return state;
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <check_power_button+0x8c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000008c 	.word	0x2000008c
 8001d74:	20000088 	.word	0x20000088
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	20000080 	.word	0x20000080
 8001d84:	20000205 	.word	0x20000205

08001d88 <motor_direction>:
void motor_direction (uint8_t dirc,uint8_t speed)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460a      	mov	r2, r1
 8001d92:	71fb      	strb	r3, [r7, #7]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71bb      	strb	r3, [r7, #6]
	switch (dirc)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d006      	beq.n	8001dac <motor_direction+0x24>
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	dc3d      	bgt.n	8001e1e <motor_direction+0x96>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <motor_direction+0x70>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d013      	beq.n	8001dd2 <motor_direction+0x4a>
    	SetMotorSpeed(speed);
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
		break;
	default :break;
 8001daa:	e038      	b.n	8001e1e <motor_direction+0x96>
    	SetMotorSpeed(speed);
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff26 	bl	8001c00 <SetMotorSpeed>
    	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001db4:	2100      	movs	r1, #0
 8001db6:	481c      	ldr	r0, [pc, #112]	@ (8001e28 <motor_direction+0xa0>)
 8001db8:	f002 fffc 	bl	8004db4 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	481a      	ldr	r0, [pc, #104]	@ (8001e2c <motor_direction+0xa4>)
 8001dc2:	f001 fbcb 	bl	800355c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2120      	movs	r1, #32
 8001dca:	4818      	ldr	r0, [pc, #96]	@ (8001e2c <motor_direction+0xa4>)
 8001dcc:	f001 fbc6 	bl	800355c <HAL_GPIO_WritePin>
		break;
 8001dd0:	e026      	b.n	8001e20 <motor_direction+0x98>
    	SetMotorSpeed(speed);
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff13 	bl	8001c00 <SetMotorSpeed>
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4812      	ldr	r0, [pc, #72]	@ (8001e28 <motor_direction+0xa0>)
 8001dde:	f002 ff39 	bl	8004c54 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2110      	movs	r1, #16
 8001de6:	4811      	ldr	r0, [pc, #68]	@ (8001e2c <motor_direction+0xa4>)
 8001de8:	f001 fbb8 	bl	800355c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2120      	movs	r1, #32
 8001df0:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <motor_direction+0xa4>)
 8001df2:	f001 fbb3 	bl	800355c <HAL_GPIO_WritePin>
		break;
 8001df6:	e013      	b.n	8001e20 <motor_direction+0x98>
    	SetMotorSpeed(speed);
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff00 	bl	8001c00 <SetMotorSpeed>
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001e00:	2100      	movs	r1, #0
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <motor_direction+0xa0>)
 8001e04:	f002 ff26 	bl	8004c54 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <motor_direction+0xa4>)
 8001e0e:	f001 fba5 	bl	800355c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	2120      	movs	r1, #32
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <motor_direction+0xa4>)
 8001e18:	f001 fba0 	bl	800355c <HAL_GPIO_WritePin>
		break;
 8001e1c:	e000      	b.n	8001e20 <motor_direction+0x98>
	default :break;
 8001e1e:	bf00      	nop
	}
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000012c 	.word	0x2000012c
 8001e2c:	40020400 	.word	0x40020400

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001e42:	f000 fa1f 	bl	8002284 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001e46:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2178      	movs	r1, #120	@ 0x78
 8001e4e:	485b      	ldr	r0, [pc, #364]	@ (8001fbc <SSD1306_Init+0x180>)
 8001e50:	f001 fdf8 	bl	8003a44 <HAL_I2C_IsDeviceReady>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e0a9      	b.n	8001fb2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001e5e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e64:	e002      	b.n	8001e6c <SSD1306_Init+0x30>
		p--;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e72:	22ae      	movs	r2, #174	@ 0xae
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	@ 0x78
 8001e78:	f000 fa80 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	@ 0x78
 8001e82:	f000 fa7b 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e86:	2210      	movs	r2, #16
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	@ 0x78
 8001e8c:	f000 fa76 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e90:	22b0      	movs	r2, #176	@ 0xb0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	@ 0x78
 8001e96:	f000 fa71 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e9a:	22c8      	movs	r2, #200	@ 0xc8
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	@ 0x78
 8001ea0:	f000 fa6c 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	@ 0x78
 8001eaa:	f000 fa67 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001eae:	2210      	movs	r2, #16
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	@ 0x78
 8001eb4:	f000 fa62 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001eb8:	2240      	movs	r2, #64	@ 0x40
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	@ 0x78
 8001ebe:	f000 fa5d 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ec2:	2281      	movs	r2, #129	@ 0x81
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	@ 0x78
 8001ec8:	f000 fa58 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ecc:	22ff      	movs	r2, #255	@ 0xff
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	@ 0x78
 8001ed2:	f000 fa53 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ed6:	22a1      	movs	r2, #161	@ 0xa1
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	@ 0x78
 8001edc:	f000 fa4e 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001ee0:	22a6      	movs	r2, #166	@ 0xa6
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	@ 0x78
 8001ee6:	f000 fa49 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001eea:	22a8      	movs	r2, #168	@ 0xa8
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	@ 0x78
 8001ef0:	f000 fa44 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ef4:	223f      	movs	r2, #63	@ 0x3f
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2078      	movs	r0, #120	@ 0x78
 8001efa:	f000 fa3f 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001efe:	22a4      	movs	r2, #164	@ 0xa4
 8001f00:	2100      	movs	r1, #0
 8001f02:	2078      	movs	r0, #120	@ 0x78
 8001f04:	f000 fa3a 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001f08:	22d3      	movs	r2, #211	@ 0xd3
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2078      	movs	r0, #120	@ 0x78
 8001f0e:	f000 fa35 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	@ 0x78
 8001f18:	f000 fa30 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f1c:	22d5      	movs	r2, #213	@ 0xd5
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	@ 0x78
 8001f22:	f000 fa2b 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001f26:	22f0      	movs	r2, #240	@ 0xf0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	@ 0x78
 8001f2c:	f000 fa26 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f30:	22d9      	movs	r2, #217	@ 0xd9
 8001f32:	2100      	movs	r1, #0
 8001f34:	2078      	movs	r0, #120	@ 0x78
 8001f36:	f000 fa21 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001f3a:	2222      	movs	r2, #34	@ 0x22
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2078      	movs	r0, #120	@ 0x78
 8001f40:	f000 fa1c 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f44:	22da      	movs	r2, #218	@ 0xda
 8001f46:	2100      	movs	r1, #0
 8001f48:	2078      	movs	r0, #120	@ 0x78
 8001f4a:	f000 fa17 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001f4e:	2212      	movs	r2, #18
 8001f50:	2100      	movs	r1, #0
 8001f52:	2078      	movs	r0, #120	@ 0x78
 8001f54:	f000 fa12 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f58:	22db      	movs	r2, #219	@ 0xdb
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2078      	movs	r0, #120	@ 0x78
 8001f5e:	f000 fa0d 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f62:	2220      	movs	r2, #32
 8001f64:	2100      	movs	r1, #0
 8001f66:	2078      	movs	r0, #120	@ 0x78
 8001f68:	f000 fa08 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f6c:	228d      	movs	r2, #141	@ 0x8d
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2078      	movs	r0, #120	@ 0x78
 8001f72:	f000 fa03 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f76:	2214      	movs	r2, #20
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2078      	movs	r0, #120	@ 0x78
 8001f7c:	f000 f9fe 	bl	800237c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f80:	22af      	movs	r2, #175	@ 0xaf
 8001f82:	2100      	movs	r1, #0
 8001f84:	2078      	movs	r0, #120	@ 0x78
 8001f86:	f000 f9f9 	bl	800237c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f8a:	222e      	movs	r2, #46	@ 0x2e
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2078      	movs	r0, #120	@ 0x78
 8001f90:	f000 f9f4 	bl	800237c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f000 f843 	bl	8002020 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001f9a:	f000 f813 	bl	8001fc4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <SSD1306_Init+0x184>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SSD1306_Init+0x184>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <SSD1306_Init+0x184>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001fb0:	2301      	movs	r3, #1
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200000d8 	.word	0x200000d8
 8001fc0:	20000608 	.word	0x20000608

08001fc4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e01d      	b.n	800200c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	3b50      	subs	r3, #80	@ 0x50
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	@ 0x78
 8001fdc:	f000 f9ce 	bl	800237c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	@ 0x78
 8001fe6:	f000 f9c9 	bl	800237c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001fea:	2210      	movs	r2, #16
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	@ 0x78
 8001ff0:	f000 f9c4 	bl	800237c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	4a08      	ldr	r2, [pc, #32]	@ (800201c <SSD1306_UpdateScreen+0x58>)
 8001ffa:	441a      	add	r2, r3
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	2140      	movs	r1, #64	@ 0x40
 8002000:	2078      	movs	r0, #120	@ 0x78
 8002002:	f000 f955 	bl	80022b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	3301      	adds	r3, #1
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	2b07      	cmp	r3, #7
 8002010:	d9de      	bls.n	8001fd0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000208 	.word	0x20000208

08002020 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <SSD1306_Fill+0x14>
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <SSD1306_Fill+0x16>
 8002034:	23ff      	movs	r3, #255	@ 0xff
 8002036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800203a:	4619      	mov	r1, r3
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <SSD1306_Fill+0x2c>)
 800203e:	f003 fdc7 	bl	8005bd0 <memset>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000208 	.word	0x20000208

08002050 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
 800205a:	460b      	mov	r3, r1
 800205c:	80bb      	strh	r3, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	70fb      	strb	r3, [r7, #3]
	if (
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b7f      	cmp	r3, #127	@ 0x7f
 8002066:	d848      	bhi.n	80020fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	2b3f      	cmp	r3, #63	@ 0x3f
 800206c:	d845      	bhi.n	80020fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <SSD1306_DrawPixel+0xb8>)
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d11a      	bne.n	80020c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	b298      	uxth	r0, r3
 8002092:	4603      	mov	r3, r0
 8002094:	01db      	lsls	r3, r3, #7
 8002096:	4413      	add	r3, r2
 8002098:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <SSD1306_DrawPixel+0xbc>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	b25a      	sxtb	r2, r3
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b259      	sxtb	r1, r3
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	4603      	mov	r3, r0
 80020b4:	01db      	lsls	r3, r3, #7
 80020b6:	4413      	add	r3, r2
 80020b8:	b2c9      	uxtb	r1, r1
 80020ba:	4a14      	ldr	r2, [pc, #80]	@ (800210c <SSD1306_DrawPixel+0xbc>)
 80020bc:	54d1      	strb	r1, [r2, r3]
 80020be:	e01d      	b.n	80020fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	88bb      	ldrh	r3, [r7, #4]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	b298      	uxth	r0, r3
 80020c8:	4603      	mov	r3, r0
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4413      	add	r3, r2
 80020ce:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <SSD1306_DrawPixel+0xbc>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	b25a      	sxtb	r2, r3
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4013      	ands	r3, r2
 80020e8:	b259      	sxtb	r1, r3
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	4603      	mov	r3, r0
 80020ee:	01db      	lsls	r3, r3, #7
 80020f0:	4413      	add	r3, r2
 80020f2:	b2c9      	uxtb	r1, r1
 80020f4:	4a05      	ldr	r2, [pc, #20]	@ (800210c <SSD1306_DrawPixel+0xbc>)
 80020f6:	54d1      	strb	r1, [r2, r3]
 80020f8:	e000      	b.n	80020fc <SSD1306_DrawPixel+0xac>
		return;
 80020fa:	bf00      	nop
	}
}
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000608 	.word	0x20000608
 800210c:	20000208 	.word	0x20000208

08002110 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	4613      	mov	r3, r2
 800211e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <SSD1306_GotoXY+0x28>)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <SSD1306_GotoXY+0x28>)
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	8053      	strh	r3, [r2, #2]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000608 	.word	0x20000608

0800213c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	4613      	mov	r3, r2
 800214a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800214c:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <SSD1306_Putc+0xf8>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
	if (
 8002158:	2b7f      	cmp	r3, #127	@ 0x7f
 800215a:	dc07      	bgt.n	800216c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800215c:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <SSD1306_Putc+0xf8>)
 800215e:	885b      	ldrh	r3, [r3, #2]
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002168:	2b3f      	cmp	r3, #63	@ 0x3f
 800216a:	dd01      	ble.n	8002170 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800216c:	2300      	movs	r3, #0
 800216e:	e05d      	b.n	800222c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e04b      	b.n	800220e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	3b20      	subs	r3, #32
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	7849      	ldrb	r1, [r1, #1]
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4619      	mov	r1, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	440b      	add	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e030      	b.n	80021fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d010      	beq.n	80021cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <SSD1306_Putc+0xf8>)
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	b298      	uxth	r0, r3
 80021b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <SSD1306_Putc+0xf8>)
 80021b8:	885a      	ldrh	r2, [r3, #2]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	79ba      	ldrb	r2, [r7, #6]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7ff ff43 	bl	8002050 <SSD1306_DrawPixel>
 80021ca:	e014      	b.n	80021f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <SSD1306_Putc+0xf8>)
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b298      	uxth	r0, r3
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <SSD1306_Putc+0xf8>)
 80021da:	885a      	ldrh	r2, [r3, #2]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	b299      	uxth	r1, r3
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	f7ff ff2d 	bl	8002050 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	3301      	adds	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4293      	cmp	r3, r2
 8002206:	d3c8      	bcc.n	800219a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	461a      	mov	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4293      	cmp	r3, r2
 8002218:	d3ad      	bcc.n	8002176 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <SSD1306_Putc+0xf8>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <SSD1306_Putc+0xf8>)
 8002228:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800222a:	79fb      	ldrb	r3, [r7, #7]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000608 	.word	0x20000608

08002238 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002246:	e012      	b.n	800226e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff73 	bl	800213c <SSD1306_Putc>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d002      	beq.n	8002268 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	e008      	b.n	800227a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e8      	bne.n	8002248 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <ssd1306_I2C_Init+0x28>)
 800228c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800228e:	e002      	b.n	8002296 <ssd1306_I2C_Init+0x12>
		p--;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	0003d090 	.word	0x0003d090

080022b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b0c7      	sub	sp, #284	@ 0x11c
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80022be:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80022c2:	600a      	str	r2, [r1, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022ca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80022ce:	4622      	mov	r2, r4
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022d6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022da:	4602      	mov	r2, r0
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022e6:	460a      	mov	r2, r1
 80022e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80022ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80022f6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002304:	e015      	b.n	8002332 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002306:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800230a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800230e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	441a      	add	r2, r3
 8002316:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800231a:	3301      	adds	r3, #1
 800231c:	7811      	ldrb	r1, [r2, #0]
 800231e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002322:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002326:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002328:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800232c:	3301      	adds	r3, #1
 800232e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002332:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002336:	b29b      	uxth	r3, r3
 8002338:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800233c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d8df      	bhi.n	8002306 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002346:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800234a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b299      	uxth	r1, r3
 8002352:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002356:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	200a      	movs	r0, #10
 8002366:	9000      	str	r0, [sp, #0]
 8002368:	4803      	ldr	r0, [pc, #12]	@ (8002378 <ssd1306_I2C_WriteMulti+0xc8>)
 800236a:	f001 fa6d 	bl	8003848 <HAL_I2C_Master_Transmit>
}
 800236e:	bf00      	nop
 8002370:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	200000d8 	.word	0x200000d8

0800237c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	460b      	mov	r3, r1
 8002388:	71bb      	strb	r3, [r7, #6]
 800238a:	4613      	mov	r3, r2
 800238c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800238e:	79bb      	ldrb	r3, [r7, #6]
 8002390:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002392:	797b      	ldrb	r3, [r7, #5]
 8002394:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	b299      	uxth	r1, r3
 800239a:	f107 020c 	add.w	r2, r7, #12
 800239e:	230a      	movs	r3, #10
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2302      	movs	r3, #2
 80023a4:	4803      	ldr	r0, [pc, #12]	@ (80023b4 <ssd1306_I2C_Write+0x38>)
 80023a6:	f001 fa4f 	bl	8003848 <HAL_I2C_Master_Transmit>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200000d8 	.word	0x200000d8

080023b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_ADC_MspInit+0x7c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d127      	bne.n	800247a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a0e      	ldr	r2, [pc, #56]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_ADC_MspInit+0x80>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Load_Sensor_Pin|Battery_average_Pin;
 8002462:	2303      	movs	r3, #3
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002466:	2303      	movs	r3, #3
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	@ (800248c <HAL_ADC_MspInit+0x84>)
 8002476:	f000 fed5 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40012000 	.word	0x40012000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000

08002490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <HAL_I2C_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a17      	ldr	r2, [pc, #92]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80024ce:	23c0      	movs	r3, #192	@ 0xc0
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	2312      	movs	r3, #18
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024de:	2304      	movs	r3, #4
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <HAL_I2C_MspInit+0x8c>)
 80024ea:	f000 fe9b 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 80024f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_I2C_MspInit+0x88>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	@ 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40005400 	.word	0x40005400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400

08002520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_TIM_Base_MspInit+0xa8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a24      	ldr	r2, [pc, #144]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800254e:	e036      	b.n	80025be <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002558:	d116      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	201c      	movs	r0, #28
 800257c:	f000 fe1b 	bl	80031b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002580:	201c      	movs	r0, #28
 8002582:	f000 fe34 	bl	80031ee <HAL_NVIC_EnableIRQ>
}
 8002586:	e01a      	b.n	80025be <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_TIM_Base_MspInit+0xb0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d115      	bne.n	80025be <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_TIM_Base_MspInit+0xac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	201d      	movs	r0, #29
 80025b4:	f000 fdff 	bl	80031b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025b8:	201d      	movs	r0, #29
 80025ba:	f000 fe18 	bl	80031ee <HAL_NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40000400 	.word	0x40000400

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <HAL_TIM_MspPostInit+0x68>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11e      	bne.n	8002634 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_control_Pin;
 8002612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002624:	2301      	movs	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_control_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_TIM_MspPostInit+0x70>)
 8002630:	f000 fdf8 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40010000 	.word	0x40010000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <NMI_Handler+0x4>

08002650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <MemManage_Handler+0x4>

08002660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <UsageFault_Handler+0x4>

08002670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269e:	f000 f8bd 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_1_Pin);
 80026aa:	2008      	movs	r0, #8
 80026ac:	f000 ff70 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_2_Pin);
 80026b8:	2010      	movs	r0, #16
 80026ba:	f000 ff69 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_3_Pin);
 80026c6:	2020      	movs	r0, #32
 80026c8:	f000 ff62 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button_4_Pin);
 80026cc:	2040      	movs	r0, #64	@ 0x40
 80026ce:	f000 ff5f 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <TIM2_IRQHandler+0x10>)
 80026de:	f002 fbcd 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000174 	.word	0x20000174

080026ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <TIM3_IRQHandler+0x10>)
 80026f2:	f002 fbc3 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200001bc 	.word	0x200001bc

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800275c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002728:	f7ff ffea 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	@ (8002760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	@ (8002764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f003 fa45 	bl	8005be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe fb5d 	bl	8000e14 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002768:	080069f4 	.word	0x080069f4
  ldr r2, =_sbss
 800276c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002770:	20000614 	.word	0x20000614

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f000 fcfd 	bl	80031a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	200f      	movs	r0, #15
 80027a8:	f000 f808 	bl	80027bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff fe04 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c4:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_InitTick+0x54>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_InitTick+0x58>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd15 	bl	800320a <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00e      	b.n	8002808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d80a      	bhi.n	8002806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f000 fcdd 	bl	80031b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027fc:	4a06      	ldr	r2, [pc, #24]	@ (8002818 <HAL_InitTick+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000054 	.word	0x20000054
 8002814:	2000005c 	.word	0x2000005c
 8002818:	20000058 	.word	0x20000058

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000005c 	.word	0x2000005c
 8002840:	20000610 	.word	0x20000610

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	@ (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000610 	.word	0x20000610

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000005c 	.word	0x2000005c

080028a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e033      	b.n	8002922 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fda0 	bl	8002408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028ea:	f023 0302 	bic.w	r3, r3, #2
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa86 	bl	8002e08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
 8002912:	e001      	b.n	8002918 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e097      	b.n	8002a76 <HAL_ADC_Start+0x14a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d018      	beq.n	800298e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296c:	4b45      	ldr	r3, [pc, #276]	@ (8002a84 <HAL_ADC_Start+0x158>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <HAL_ADC_Start+0x15c>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9a      	lsrs	r2, r3, #18
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3b01      	subs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d15f      	bne.n	8002a5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029da:	d106      	bne.n	80029ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e0:	f023 0206 	bic.w	r2, r3, #6
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80029e8:	e002      	b.n	80029f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f8:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_ADC_Start+0x160>)
 80029fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d129      	bne.n	8002a74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e020      	b.n	8002a74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_ADC_Start+0x164>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11b      	bne.n	8002a74 <HAL_ADC_Start+0x148>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d114      	bne.n	8002a74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e00b      	b.n	8002a74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0210 	orr.w	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000054 	.word	0x20000054
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	40012300 	.word	0x40012300
 8002a90:	40012000 	.word	0x40012000

08002a94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab0:	d113      	bne.n	8002ada <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d10b      	bne.n	8002ada <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e063      	b.n	8002ba2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ada:	f7ff feb3 	bl	8002844 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae0:	e021      	b.n	8002b26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d01d      	beq.n	8002b26 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_ADC_PollForConversion+0x6c>
 8002af0:	f7ff fea8 	bl	8002844 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d212      	bcs.n	8002b26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d00b      	beq.n	8002b26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e03d      	b.n	8002ba2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d1d6      	bne.n	8002ae2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0212 	mvn.w	r2, #18
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d123      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11f      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e105      	b.n	8002dec <HAL_ADC_ConfigChannel+0x228>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	d925      	bls.n	8002c3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	3b1e      	subs	r3, #30
 8002c06:	2207      	movs	r2, #7
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68d9      	ldr	r1, [r3, #12]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	4603      	mov	r3, r0
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4403      	add	r3, r0
 8002c2e:	3b1e      	subs	r3, #30
 8002c30:	409a      	lsls	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e022      	b.n	8002c82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6919      	ldr	r1, [r3, #16]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	2207      	movs	r2, #7
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6919      	ldr	r1, [r3, #16]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4403      	add	r3, r0
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d824      	bhi.n	8002cd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b05      	subs	r3, #5
 8002c9c:	221f      	movs	r2, #31
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	400a      	ands	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b05      	subs	r3, #5
 8002cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cd2:	e04c      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d824      	bhi.n	8002d26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b23      	subs	r3, #35	@ 0x23
 8002cee:	221f      	movs	r2, #31
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	3b23      	subs	r3, #35	@ 0x23
 8002d18:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d24:	e023      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	3b41      	subs	r3, #65	@ 0x41
 8002d38:	221f      	movs	r2, #31
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	400a      	ands	r2, r1
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b41      	subs	r3, #65	@ 0x41
 8002d62:	fa00 f203 	lsl.w	r2, r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_ADC_ConfigChannel+0x234>)
 8002d70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a21      	ldr	r2, [pc, #132]	@ (8002dfc <HAL_ADC_ConfigChannel+0x238>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d109      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1cc>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b12      	cmp	r3, #18
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	@ (8002dfc <HAL_ADC_ConfigChannel+0x238>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d123      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x21e>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d003      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x1e6>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b11      	cmp	r3, #17
 8002da8:	d11b      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d111      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <HAL_ADC_ConfigChannel+0x23c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	@ (8002e04 <HAL_ADC_ConfigChannel+0x240>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	0c9a      	lsrs	r2, r3, #18
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002dd4:	e002      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	20000054 	.word	0x20000054
 8002e04:	431bde83 	.word	0x431bde83

08002e08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e10:	4b79      	ldr	r3, [pc, #484]	@ (8002ff8 <ADC_Init+0x1f0>)
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	4a58      	ldr	r2, [pc, #352]	@ (8002ffc <ADC_Init+0x1f4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e00f      	b.n	8002f06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0202 	bic.w	r2, r2, #2
 8002f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6899      	ldr	r1, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7e1b      	ldrb	r3, [r3, #24]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	035a      	lsls	r2, r3, #13
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e007      	b.n	8002f7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	051a      	lsls	r2, r3, #20
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fbe:	025a      	lsls	r2, r3, #9
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	029a      	lsls	r2, r3, #10
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	0f000001 	.word	0x0f000001

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800302c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	@ (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	490c      	ldr	r1, [pc, #48]	@ (80030ec <__NVIC_SetPriority+0x4c>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4908      	ldr	r1, [pc, #32]	@ (80030f0 <__NVIC_SetPriority+0x50>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	3b04      	subs	r3, #4
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	401a      	ands	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43d9      	mvns	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	4313      	orrs	r3, r2
         );
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800316c:	d301      	bcc.n	8003172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <SysTick_Config+0x40>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317a:	210f      	movs	r1, #15
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f7ff ff8e 	bl	80030a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <SysTick_Config+0x40>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <SysTick_Config+0x40>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff29 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff3e 	bl	8003048 <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff8e 	bl	80030f4 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5d 	bl	80030a0 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff31 	bl	8003064 <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa2 	bl	800315c <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e159      	b.n	80034f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8148 	bne.w	80034ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	2b02      	cmp	r3, #2
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d123      	bne.n	8003368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	08da      	lsrs	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3208      	adds	r2, #8
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a2 	beq.w	80034ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b57      	ldr	r3, [pc, #348]	@ (800350c <HAL_GPIO_Init+0x2e8>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	4a56      	ldr	r2, [pc, #344]	@ (800350c <HAL_GPIO_Init+0x2e8>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ba:	4b54      	ldr	r3, [pc, #336]	@ (800350c <HAL_GPIO_Init+0x2e8>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c6:	4a52      	ldr	r2, [pc, #328]	@ (8003510 <HAL_GPIO_Init+0x2ec>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a49      	ldr	r2, [pc, #292]	@ (8003514 <HAL_GPIO_Init+0x2f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x202>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a48      	ldr	r2, [pc, #288]	@ (8003518 <HAL_GPIO_Init+0x2f4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x1fe>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a47      	ldr	r2, [pc, #284]	@ (800351c <HAL_GPIO_Init+0x2f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x1fa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a46      	ldr	r2, [pc, #280]	@ (8003520 <HAL_GPIO_Init+0x2fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x1f6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a45      	ldr	r2, [pc, #276]	@ (8003524 <HAL_GPIO_Init+0x300>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x1f2>
 8003412:	2304      	movs	r3, #4
 8003414:	e008      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003416:	2307      	movs	r3, #7
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x204>
 800341a:	2303      	movs	r3, #3
 800341c:	e004      	b.n	8003428 <HAL_GPIO_Init+0x204>
 800341e:	2302      	movs	r3, #2
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003426:	2300      	movs	r3, #0
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	f002 0203 	and.w	r2, r2, #3
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	4093      	lsls	r3, r2
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003438:	4935      	ldr	r1, [pc, #212]	@ (8003510 <HAL_GPIO_Init+0x2ec>)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003446:	4b38      	ldr	r3, [pc, #224]	@ (8003528 <HAL_GPIO_Init+0x304>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346a:	4a2f      	ldr	r2, [pc, #188]	@ (8003528 <HAL_GPIO_Init+0x304>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003470:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <HAL_GPIO_Init+0x304>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003494:	4a24      	ldr	r2, [pc, #144]	@ (8003528 <HAL_GPIO_Init+0x304>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800349a:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_GPIO_Init+0x304>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034be:	4a1a      	ldr	r2, [pc, #104]	@ (8003528 <HAL_GPIO_Init+0x304>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c4:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <HAL_GPIO_Init+0x304>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <HAL_GPIO_Init+0x304>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	f67f aea2 	bls.w	8003240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40013800 	.word	0x40013800
 8003514:	40020000 	.word	0x40020000
 8003518:	40020400 	.word	0x40020400
 800351c:	40020800 	.word	0x40020800
 8003520:	40020c00 	.word	0x40020c00
 8003524:	40021000 	.word	0x40021000
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e001      	b.n	800354e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035a6:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd ff88 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e12b      	b.n	800382a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fe ff52 	bl	8002490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003624:	f001 f9c8 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8003628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4a81      	ldr	r2, [pc, #516]	@ (8003834 <HAL_I2C_Init+0x274>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d807      	bhi.n	8003644 <HAL_I2C_Init+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a80      	ldr	r2, [pc, #512]	@ (8003838 <HAL_I2C_Init+0x278>)
 8003638:	4293      	cmp	r3, r2
 800363a:	bf94      	ite	ls
 800363c:	2301      	movls	r3, #1
 800363e:	2300      	movhi	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e006      	b.n	8003652 <HAL_I2C_Init+0x92>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a7d      	ldr	r2, [pc, #500]	@ (800383c <HAL_I2C_Init+0x27c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0e7      	b.n	800382a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a78      	ldr	r2, [pc, #480]	@ (8003840 <HAL_I2C_Init+0x280>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a6a      	ldr	r2, [pc, #424]	@ (8003834 <HAL_I2C_Init+0x274>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d802      	bhi.n	8003694 <HAL_I2C_Init+0xd4>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	e009      	b.n	80036a8 <HAL_I2C_Init+0xe8>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	4a69      	ldr	r2, [pc, #420]	@ (8003844 <HAL_I2C_Init+0x284>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	3301      	adds	r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	495c      	ldr	r1, [pc, #368]	@ (8003834 <HAL_I2C_Init+0x274>)
 80036c4:	428b      	cmp	r3, r1
 80036c6:	d819      	bhi.n	80036fc <HAL_I2C_Init+0x13c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e59      	subs	r1, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036dc:	400b      	ands	r3, r1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_I2C_Init+0x138>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e59      	subs	r1, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	e051      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e04f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <HAL_I2C_Init+0x168>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e012      	b.n	800374e <HAL_I2C_Init+0x18e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	0099      	lsls	r1, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Init+0x196>
 8003752:	2301      	movs	r3, #1
 8003754:	e022      	b.n	800379c <HAL_I2C_Init+0x1dc>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10e      	bne.n	800377c <HAL_I2C_Init+0x1bc>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e58      	subs	r0, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	440b      	add	r3, r1
 800376c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800377a:	e00f      	b.n	800379c <HAL_I2C_Init+0x1dc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	6809      	ldr	r1, [r1, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6911      	ldr	r1, [r2, #16]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	000186a0 	.word	0x000186a0
 8003838:	001e847f 	.word	0x001e847f
 800383c:	003d08ff 	.word	0x003d08ff
 8003840:	431bde83 	.word	0x431bde83
 8003844:	10624dd3 	.word	0x10624dd3

08003848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	460b      	mov	r3, r1
 8003856:	817b      	strh	r3, [r7, #10]
 8003858:	4613      	mov	r3, r2
 800385a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7fe fff2 	bl	8002844 <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	f040 80e0 	bne.w	8003a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2319      	movs	r3, #25
 8003876:	2201      	movs	r2, #1
 8003878:	4970      	ldr	r1, [pc, #448]	@ (8003a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa92 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
 8003888:	e0d3      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_I2C_Master_Transmit+0x50>
 8003894:	2302      	movs	r3, #2
 8003896:	e0cc      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d007      	beq.n	80038be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	@ 0x21
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2210      	movs	r2, #16
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	893a      	ldrh	r2, [r7, #8]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a50      	ldr	r2, [pc, #320]	@ (8003a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f9ca 	bl	8003ca0 <I2C_MasterRequestWrite>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e08d      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800392c:	e066      	b.n	80039fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fb50 	bl	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e06b      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d11b      	bne.n	80039d0 <HAL_I2C_Master_Transmit+0x188>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	6a39      	ldr	r1, [r7, #32]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fb47 	bl	8004068 <I2C_WaitOnBTFFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d107      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01a      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d194      	bne.n	800392e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	00100002 	.word	0x00100002
 8003a40:	ffff0000 	.word	0xffff0000

08003a44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	@ 0x28
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7fe fef6 	bl	8002844 <HAL_GetTick>
 8003a58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	f040 8111 	bne.w	8003c8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2319      	movs	r3, #25
 8003a72:	2201      	movs	r2, #1
 8003a74:	4988      	ldr	r1, [pc, #544]	@ (8003c98 <HAL_I2C_IsDeviceReady+0x254>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f994 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	e104      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2C_IsDeviceReady+0x50>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0fd      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d007      	beq.n	8003aba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2224      	movs	r2, #36	@ 0x24
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a70      	ldr	r2, [pc, #448]	@ (8003c9c <HAL_I2C_IsDeviceReady+0x258>)
 8003adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f952 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b14:	d103      	bne.n	8003b1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0b6      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fe87 	bl	8002844 <HAL_GetTick>
 8003b36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b66:	e025      	b.n	8003bb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7fe fe6c 	bl	8002844 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <HAL_I2C_IsDeviceReady+0x13a>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22a0      	movs	r2, #160	@ 0xa0
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bbe:	d005      	beq.n	8003bcc <HAL_I2C_IsDeviceReady+0x188>
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_I2C_IsDeviceReady+0x188>
 8003bc6:	7dbb      	ldrb	r3, [r7, #22]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0cd      	beq.n	8003b68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d129      	bne.n	8003c36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2319      	movs	r3, #25
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4921      	ldr	r1, [pc, #132]	@ (8003c98 <HAL_I2C_IsDeviceReady+0x254>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8c6 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e036      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e02c      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2319      	movs	r3, #25
 8003c56:	2201      	movs	r2, #1
 8003c58:	490f      	ldr	r1, [pc, #60]	@ (8003c98 <HAL_I2C_IsDeviceReady+0x254>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8a2 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e012      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f4ff af32 	bcc.w	8003ade <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	00100002 	.word	0x00100002
 8003c9c:	ffff0000 	.word	0xffff0000

08003ca0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d006      	beq.n	8003cca <I2C_MasterRequestWrite+0x2a>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <I2C_MasterRequestWrite+0x2a>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cc8:	d108      	bne.n	8003cdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e00b      	b.n	8003cf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	2b12      	cmp	r3, #18
 8003ce2:	d107      	bne.n	8003cf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f84f 	bl	8003da4 <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1a:	d103      	bne.n	8003d24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e035      	b.n	8003d94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d30:	d108      	bne.n	8003d44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e01b      	b.n	8003d7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	11db      	asrs	r3, r3, #7
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0306 	and.w	r3, r3, #6
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f063 030f 	orn	r3, r3, #15
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	490e      	ldr	r1, [pc, #56]	@ (8003d9c <I2C_MasterRequestWrite+0xfc>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f898 	bl	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e010      	b.n	8003d94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4907      	ldr	r1, [pc, #28]	@ (8003da0 <I2C_MasterRequestWrite+0x100>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f888 	bl	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	00010008 	.word	0x00010008
 8003da0:	00010002 	.word	0x00010002

08003da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db4:	e048      	b.n	8003e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d044      	beq.n	8003e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fe fd41 	bl	8002844 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d139      	bne.n	8003e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10d      	bne.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	e00c      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	43da      	mvns	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4013      	ands	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d116      	bne.n	8003e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e023      	b.n	8003e90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d10d      	bne.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	e00c      	b.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	43da      	mvns	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d093      	beq.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea6:	e071      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb6:	d123      	bne.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e067      	b.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d041      	beq.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f08:	f7fe fc9c 	bl	8002844 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d136      	bne.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10c      	bne.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e00b      	b.n	8003f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e021      	b.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10c      	bne.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e00b      	b.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f af6d 	bne.w	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe4:	e034      	b.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f886 	bl	80040f8 <I2C_IsAcknowledgeFailed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e034      	b.n	8004060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d028      	beq.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe fc21 	bl	8002844 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11d      	bne.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b80      	cmp	r3, #128	@ 0x80
 8004020:	d016      	beq.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d1c3      	bne.n	8003fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004074:	e034      	b.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f83e 	bl	80040f8 <I2C_IsAcknowledgeFailed>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e034      	b.n	80040f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d028      	beq.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe fbd9 	bl	8002844 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d016      	beq.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e007      	b.n	80040f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d1c3      	bne.n	8004076 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d11b      	bne.n	8004148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e267      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d075      	beq.n	8004262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004176:	4b88      	ldr	r3, [pc, #544]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00c      	beq.n	800419c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4b85      	ldr	r3, [pc, #532]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418a:	2b08      	cmp	r3, #8
 800418c:	d112      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b82      	ldr	r3, [pc, #520]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419a:	d10b      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	4b7e      	ldr	r3, [pc, #504]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05b      	beq.n	8004260 <HAL_RCC_OscConfig+0x108>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d157      	bne.n	8004260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e242      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_OscConfig+0x74>
 80041be:	4b76      	ldr	r3, [pc, #472]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a75      	ldr	r2, [pc, #468]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e01d      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x98>
 80041d6:	4b70      	ldr	r3, [pc, #448]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6f      	ldr	r2, [pc, #444]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041f0:	4b69      	ldr	r3, [pc, #420]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a68      	ldr	r2, [pc, #416]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b66      	ldr	r3, [pc, #408]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fe fb18 	bl	8002844 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004218:	f7fe fb14 	bl	8002844 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	@ 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e207      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b5b      	ldr	r3, [pc, #364]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0xc0>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fe fb04 	bl	8002844 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fe fb00 	bl	8002844 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	@ 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1f3      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	4b51      	ldr	r3, [pc, #324]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0xe8>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d063      	beq.n	8004336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426e:	4b4a      	ldr	r3, [pc, #296]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b44      	ldr	r3, [pc, #272]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b41      	ldr	r3, [pc, #260]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1c7      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4937      	ldr	r1, [pc, #220]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e03a      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCC_OscConfig+0x244>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fe fab9 	bl	8002844 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fe fab5 	bl	8002844 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1a8      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4925      	ldr	r1, [pc, #148]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_RCC_OscConfig+0x244>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe fa98 	bl	8002844 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004318:	f7fe fa94 	bl	8002844 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e187      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d036      	beq.n	80043b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <HAL_RCC_OscConfig+0x248>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fe fa78 	bl	8002844 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004358:	f7fe fa74 	bl	8002844 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e167      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_RCC_OscConfig+0x240>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x200>
 8004376:	e01b      	b.n	80043b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_RCC_OscConfig+0x248>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fe fa61 	bl	8002844 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	e00e      	b.n	80043a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004386:	f7fe fa5d 	bl	8002844 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d907      	bls.n	80043a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e150      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
 8004398:	40023800 	.word	0x40023800
 800439c:	42470000 	.word	0x42470000
 80043a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a4:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8097 	beq.w	80044ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b81      	ldr	r3, [pc, #516]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	4b7d      	ldr	r3, [pc, #500]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	4a7c      	ldr	r2, [pc, #496]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043de:	4b7a      	ldr	r3, [pc, #488]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b77      	ldr	r3, [pc, #476]	@ (80045cc <HAL_RCC_OscConfig+0x474>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b74      	ldr	r3, [pc, #464]	@ (80045cc <HAL_RCC_OscConfig+0x474>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a73      	ldr	r2, [pc, #460]	@ (80045cc <HAL_RCC_OscConfig+0x474>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fe fa1d 	bl	8002844 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fe fa19 	bl	8002844 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e10c      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b6a      	ldr	r3, [pc, #424]	@ (80045cc <HAL_RCC_OscConfig+0x474>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x2ea>
 8004434:	4b64      	ldr	r3, [pc, #400]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a63      	ldr	r2, [pc, #396]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x324>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b05      	cmp	r3, #5
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x30c>
 800444a:	4b5f      	ldr	r3, [pc, #380]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a5e      	ldr	r2, [pc, #376]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b5c      	ldr	r3, [pc, #368]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a5b      	ldr	r2, [pc, #364]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0x324>
 8004464:	4b58      	ldr	r3, [pc, #352]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	4a57      	ldr	r2, [pc, #348]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004470:	4b55      	ldr	r3, [pc, #340]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a54      	ldr	r2, [pc, #336]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004476:	f023 0304 	bic.w	r3, r3, #4
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fe f9de 	bl	8002844 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448c:	f7fe f9da 	bl	8002844 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0cb      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	4b49      	ldr	r3, [pc, #292]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ee      	beq.n	800448c <HAL_RCC_OscConfig+0x334>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7fe f9c8 	bl	8002844 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f9c4 	bl	8002844 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0b5      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	4b3e      	ldr	r3, [pc, #248]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ee      	bne.n	80044b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	4a38      	ldr	r2, [pc, #224]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a1 	beq.w	8004638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f6:	4b34      	ldr	r3, [pc, #208]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d05c      	beq.n	80045bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d141      	bne.n	800458e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_RCC_OscConfig+0x478>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fe f998 	bl	8002844 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004518:	f7fe f994 	bl	8002844 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e087      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	491b      	ldr	r1, [pc, #108]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004560:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x478>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fe f96d 	bl	8002844 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456e:	f7fe f969 	bl	8002844 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e05c      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x416>
 800458c:	e054      	b.n	8004638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_RCC_OscConfig+0x478>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fe f956 	bl	8002844 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459c:	f7fe f952 	bl	8002844 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e045      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_RCC_OscConfig+0x470>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x444>
 80045ba:	e03d      	b.n	8004638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e038      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40007000 	.word	0x40007000
 80045d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_RCC_OscConfig+0x4ec>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d028      	beq.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d121      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d11a      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800460a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	4293      	cmp	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	3b01      	subs	r3, #1
 800461e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fe f884 	bl	8002844 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fe f880 	bl	8002844 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	@ (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f821 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	@ (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd ffe4 	bl	80027bc <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	080069a4 	.word	0x080069a4
 800480c:	20000054 	.word	0x20000054
 8004810:	20000058 	.word	0x20000058

08004814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004818:	b090      	sub	sp, #64	@ 0x40
 800481a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004820:	2300      	movs	r3, #0
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004824:	2300      	movs	r3, #0
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482c:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d00d      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x40>
 8004838:	2b08      	cmp	r3, #8
 800483a:	f200 80a1 	bhi.w	8004980 <HAL_RCC_GetSysClockFreq+0x16c>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x34>
 8004842:	2b04      	cmp	r3, #4
 8004844:	d003      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x3a>
 8004846:	e09b      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004848:	4b53      	ldr	r3, [pc, #332]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x184>)
 800484a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800484c:	e09b      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800484e:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_GetSysClockFreq+0x188>)
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004852:	e098      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004854:	4b4f      	ldr	r3, [pc, #316]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800485e:	4b4d      	ldr	r3, [pc, #308]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d028      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486a:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	2200      	movs	r2, #0
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	627a      	str	r2, [r7, #36]	@ 0x24
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800487c:	2100      	movs	r1, #0
 800487e:	4b47      	ldr	r3, [pc, #284]	@ (800499c <HAL_RCC_GetSysClockFreq+0x188>)
 8004880:	fb03 f201 	mul.w	r2, r3, r1
 8004884:	2300      	movs	r3, #0
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	4413      	add	r3, r2
 800488c:	4a43      	ldr	r2, [pc, #268]	@ (800499c <HAL_RCC_GetSysClockFreq+0x188>)
 800488e:	fba0 1202 	umull	r1, r2, r0, r2
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	460a      	mov	r2, r1
 8004896:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	4413      	add	r3, r2
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800489e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a0:	2200      	movs	r2, #0
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	61fa      	str	r2, [r7, #28]
 80048a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048ae:	f7fc f939 	bl	8000b24 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4613      	mov	r3, r2
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048ba:	e053      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048bc:	4b35      	ldr	r3, [pc, #212]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	2200      	movs	r2, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	617a      	str	r2, [r7, #20]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048ce:	f04f 0b00 	mov.w	fp, #0
 80048d2:	4652      	mov	r2, sl
 80048d4:	465b      	mov	r3, fp
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	0159      	lsls	r1, r3, #5
 80048e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e4:	0150      	lsls	r0, r2, #5
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	ebb2 080a 	subs.w	r8, r2, sl
 80048ee:	eb63 090b 	sbc.w	r9, r3, fp
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004906:	ebb2 0408 	subs.w	r4, r2, r8
 800490a:	eb63 0509 	sbc.w	r5, r3, r9
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	00eb      	lsls	r3, r5, #3
 8004918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800491c:	00e2      	lsls	r2, r4, #3
 800491e:	4614      	mov	r4, r2
 8004920:	461d      	mov	r5, r3
 8004922:	eb14 030a 	adds.w	r3, r4, sl
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	eb45 030b 	adc.w	r3, r5, fp
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800493a:	4629      	mov	r1, r5
 800493c:	028b      	lsls	r3, r1, #10
 800493e:	4621      	mov	r1, r4
 8004940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004944:	4621      	mov	r1, r4
 8004946:	028a      	lsls	r2, r1, #10
 8004948:	4610      	mov	r0, r2
 800494a:	4619      	mov	r1, r3
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	2200      	movs	r2, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	60fa      	str	r2, [r7, #12]
 8004954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004958:	f7fc f8e4 	bl	8000b24 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4613      	mov	r3, r2
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x180>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	3301      	adds	r3, #1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800497e:	e002      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x184>)
 8004982:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004988:	4618      	mov	r0, r3
 800498a:	3740      	adds	r7, #64	@ 0x40
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	00f42400 	.word	0x00f42400
 800499c:	017d7840 	.word	0x017d7840

080049a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000054 	.word	0x20000054

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049bc:	f7ff fff0 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	0a9b      	lsrs	r3, r3, #10
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4903      	ldr	r1, [pc, #12]	@ (80049dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40023800 	.word	0x40023800
 80049dc:	080069b4 	.word	0x080069b4

080049e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e041      	b.n	8004a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd fd8a 	bl	8002520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fcce 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d001      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e044      	b.n	8004b22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b30 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b34 <HAL_TIM_Base_Start_IT+0xb4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a17      	ldr	r2, [pc, #92]	@ (8004b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	@ (8004b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d111      	bne.n	8004b10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d010      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	e007      	b.n	8004b20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40014000 	.word	0x40014000

08004b44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_TIM_Base_Stop_IT+0x48>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_Base_Stop_IT+0x48>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e041      	b.n	8004c38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f839 	bl	8004c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 fbed 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_TIM_PWM_Start+0x24>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e022      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d109      	bne.n	8004c92 <HAL_TIM_PWM_Start+0x3e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e015      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d109      	bne.n	8004cac <HAL_TIM_PWM_Start+0x58>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e008      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e068      	b.n	8004d98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0x82>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd4:	e013      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0x92>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	e00b      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf4:	e003      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2201      	movs	r2, #1
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fe0c 	bl	8005924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a23      	ldr	r2, [pc, #140]	@ (8004da0 <HAL_TIM_PWM_Start+0x14c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <HAL_TIM_PWM_Start+0x14c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x10e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d38:	d013      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x10e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a19      	ldr	r2, [pc, #100]	@ (8004da4 <HAL_TIM_PWM_Start+0x150>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x10e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <HAL_TIM_PWM_Start+0x154>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x10e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <HAL_TIM_PWM_Start+0x158>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x10e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <HAL_TIM_PWM_Start+0x15c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d010      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	e007      	b.n	8004d96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fdac 	bl	8005924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	@ (8004e78 <HAL_TIM_PWM_Stop+0xc4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d117      	bne.n	8004e06 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <HAL_TIM_PWM_Stop+0x52>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	f240 4344 	movw	r3, #1092	@ 0x444
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_TIM_PWM_Stop+0x52>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_TIM_PWM_Stop+0x82>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_PWM_Stop+0x82>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Stop+0x92>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e44:	e013      	b.n	8004e6e <HAL_TIM_PWM_Stop+0xba>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Stop+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e54:	e00b      	b.n	8004e6e <HAL_TIM_PWM_Stop+0xba>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Stop+0xb2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e64:	e003      	b.n	8004e6e <HAL_TIM_PWM_Stop+0xba>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40010000 	.word	0x40010000

08004e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d020      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01b      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0202 	mvn.w	r2, #2
 8004eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa5b 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fa4d 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa5e 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d020      	beq.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0204 	mvn.w	r2, #4
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa35 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa27 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa38 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d020      	beq.n	8004f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01b      	beq.n	8004f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0208 	mvn.w	r2, #8
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa0f 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa01 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fa12 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d020      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01b      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9e9 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9db 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9ec 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0201 	mvn.w	r2, #1
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fa1c 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd7c 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00c      	beq.n	8005030 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9bd 	bl	80053aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0220 	mvn.w	r2, #32
 800504c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fd4e 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005076:	2302      	movs	r3, #2
 8005078:	e0ae      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	f200 809f 	bhi.w	80051c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080051c9 	.word	0x080051c9
 8005098:	080051c9 	.word	0x080051c9
 800509c:	080051c9 	.word	0x080051c9
 80050a0:	08005105 	.word	0x08005105
 80050a4:	080051c9 	.word	0x080051c9
 80050a8:	080051c9 	.word	0x080051c9
 80050ac:	080051c9 	.word	0x080051c9
 80050b0:	08005147 	.word	0x08005147
 80050b4:	080051c9 	.word	0x080051c9
 80050b8:	080051c9 	.word	0x080051c9
 80050bc:	080051c9 	.word	0x080051c9
 80050c0:	08005187 	.word	0x08005187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fa04 	bl	80054d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0208 	orr.w	r2, r2, #8
 80050de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0204 	bic.w	r2, r2, #4
 80050ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6999      	ldr	r1, [r3, #24]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	619a      	str	r2, [r3, #24]
      break;
 8005102:	e064      	b.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fa4a 	bl	80055a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800511e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800512e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6999      	ldr	r1, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	021a      	lsls	r2, r3, #8
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	619a      	str	r2, [r3, #24]
      break;
 8005144:	e043      	b.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fa95 	bl	800567c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0208 	orr.w	r2, r2, #8
 8005160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0204 	bic.w	r2, r2, #4
 8005170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69d9      	ldr	r1, [r3, #28]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	61da      	str	r2, [r3, #28]
      break;
 8005184:	e023      	b.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fadf 	bl	8005750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69d9      	ldr	r1, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	021a      	lsls	r2, r3, #8
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	61da      	str	r2, [r3, #28]
      break;
 80051c6:	e002      	b.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x1c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b4      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x186>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	f000 8086 	beq.w	8005352 <HAL_TIM_ConfigClockSource+0x172>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b70      	cmp	r3, #112	@ 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xa6>
 8005250:	2b70      	cmp	r3, #112	@ 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b60      	cmp	r3, #96	@ 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x11a>
 8005258:	2b60      	cmp	r3, #96	@ 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b50      	cmp	r3, #80	@ 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xfa>
 8005260:	2b50      	cmp	r3, #80	@ 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x13a>
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b30      	cmp	r3, #48	@ 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	2b30      	cmp	r3, #48	@ 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	f000 fb25 	bl	80058e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04f      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	f000 fb0e 	bl	80058e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fa82 	bl	80057f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	@ 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fadb 	bl	80058ae <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 faa1 	bl	800584e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	@ 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 facb 	bl	80058ae <TIM_ITRx_SetConfig>
      break;
 8005318:	e01c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 fa62 	bl	80057f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	@ 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fabb 	bl	80058ae <TIM_ITRx_SetConfig>
      break;
 8005338:	e00c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 fab2 	bl	80058ae <TIM_ITRx_SetConfig>
      break;
 800534a:	e003      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e000      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3a      	ldr	r2, [pc, #232]	@ (80054bc <TIM_Base_SetConfig+0xfc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00f      	beq.n	80053f8 <TIM_Base_SetConfig+0x38>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053de:	d00b      	beq.n	80053f8 <TIM_Base_SetConfig+0x38>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a37      	ldr	r2, [pc, #220]	@ (80054c0 <TIM_Base_SetConfig+0x100>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d007      	beq.n	80053f8 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a36      	ldr	r2, [pc, #216]	@ (80054c4 <TIM_Base_SetConfig+0x104>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a35      	ldr	r2, [pc, #212]	@ (80054c8 <TIM_Base_SetConfig+0x108>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d108      	bne.n	800540a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2b      	ldr	r2, [pc, #172]	@ (80054bc <TIM_Base_SetConfig+0xfc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01b      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005418:	d017      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <TIM_Base_SetConfig+0x100>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <TIM_Base_SetConfig+0x104>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00f      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a26      	ldr	r2, [pc, #152]	@ (80054c8 <TIM_Base_SetConfig+0x108>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <TIM_Base_SetConfig+0x10c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a24      	ldr	r2, [pc, #144]	@ (80054d0 <TIM_Base_SetConfig+0x110>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a23      	ldr	r2, [pc, #140]	@ (80054d4 <TIM_Base_SetConfig+0x114>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a0e      	ldr	r2, [pc, #56]	@ (80054bc <TIM_Base_SetConfig+0xfc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d103      	bne.n	8005490 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	611a      	str	r2, [r3, #16]
  }
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f023 0201 	bic.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 0302 	bic.w	r3, r3, #2
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <TIM_OC1_SetConfig+0xc8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10c      	bne.n	800554e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0308 	bic.w	r3, r3, #8
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0304 	bic.w	r3, r3, #4
 800554c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a13      	ldr	r2, [pc, #76]	@ (80055a0 <TIM_OC1_SetConfig+0xc8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d111      	bne.n	800557a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40010000 	.word	0x40010000

080055a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0210 	bic.w	r2, r3, #16
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0320 	bic.w	r3, r3, #32
 80055ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <TIM_OC2_SetConfig+0xd4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <TIM_OC2_SetConfig+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d113      	bne.n	8005650 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800562e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000

0800567c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	@ (800574c <TIM_OC3_SetConfig+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10d      	bne.n	80056f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a14      	ldr	r2, [pc, #80]	@ (800574c <TIM_OC3_SetConfig+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d113      	bne.n	8005726 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40010000 	.word	0x40010000

08005750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a10      	ldr	r2, [pc, #64]	@ (80057ec <TIM_OC4_SetConfig+0x9c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d109      	bne.n	80057c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	019b      	lsls	r3, r3, #6
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000

080057f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800581a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 030a 	bic.w	r3, r3, #10
 800582c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f023 0210 	bic.w	r2, r3, #16
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	031b      	lsls	r3, r3, #12
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800588a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f043 0307 	orr.w	r3, r3, #7
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	609a      	str	r2, [r3, #8]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	021a      	lsls	r2, r3, #8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	431a      	orrs	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	609a      	str	r2, [r3, #8]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2201      	movs	r2, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a1a      	ldr	r2, [r3, #32]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	431a      	orrs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005984:	2302      	movs	r3, #2
 8005986:	e050      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d4:	d013      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a16      	ldr	r2, [pc, #88]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a15      	ldr	r2, [pc, #84]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a13      	ldr	r2, [pc, #76]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40014000 	.word	0x40014000

08005a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e03d      	b.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <__itoa>:
 8005b18:	1e93      	subs	r3, r2, #2
 8005b1a:	2b22      	cmp	r3, #34	@ 0x22
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	460c      	mov	r4, r1
 8005b20:	d904      	bls.n	8005b2c <__itoa+0x14>
 8005b22:	2300      	movs	r3, #0
 8005b24:	700b      	strb	r3, [r1, #0]
 8005b26:	461c      	mov	r4, r3
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bd10      	pop	{r4, pc}
 8005b2c:	2a0a      	cmp	r2, #10
 8005b2e:	d109      	bne.n	8005b44 <__itoa+0x2c>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	da07      	bge.n	8005b44 <__itoa+0x2c>
 8005b34:	232d      	movs	r3, #45	@ 0x2d
 8005b36:	700b      	strb	r3, [r1, #0]
 8005b38:	4240      	negs	r0, r0
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4421      	add	r1, r4
 8005b3e:	f000 f805 	bl	8005b4c <__utoa>
 8005b42:	e7f1      	b.n	8005b28 <__itoa+0x10>
 8005b44:	2100      	movs	r1, #0
 8005b46:	e7f9      	b.n	8005b3c <__itoa+0x24>

08005b48 <itoa>:
 8005b48:	f7ff bfe6 	b.w	8005b18 <__itoa>

08005b4c <__utoa>:
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	4c1f      	ldr	r4, [pc, #124]	@ (8005bcc <__utoa+0x80>)
 8005b50:	b08b      	sub	sp, #44	@ 0x2c
 8005b52:	4605      	mov	r5, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	466e      	mov	r6, sp
 8005b58:	f104 0c20 	add.w	ip, r4, #32
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	6861      	ldr	r1, [r4, #4]
 8005b60:	4637      	mov	r7, r6
 8005b62:	c703      	stmia	r7!, {r0, r1}
 8005b64:	3408      	adds	r4, #8
 8005b66:	4564      	cmp	r4, ip
 8005b68:	463e      	mov	r6, r7
 8005b6a:	d1f7      	bne.n	8005b5c <__utoa+0x10>
 8005b6c:	7921      	ldrb	r1, [r4, #4]
 8005b6e:	7139      	strb	r1, [r7, #4]
 8005b70:	1e91      	subs	r1, r2, #2
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	6038      	str	r0, [r7, #0]
 8005b76:	2922      	cmp	r1, #34	@ 0x22
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	d904      	bls.n	8005b88 <__utoa+0x3c>
 8005b7e:	7019      	strb	r1, [r3, #0]
 8005b80:	460b      	mov	r3, r1
 8005b82:	4618      	mov	r0, r3
 8005b84:	b00b      	add	sp, #44	@ 0x2c
 8005b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b88:	1e58      	subs	r0, r3, #1
 8005b8a:	4684      	mov	ip, r0
 8005b8c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005b90:	fb02 5617 	mls	r6, r2, r7, r5
 8005b94:	3628      	adds	r6, #40	@ 0x28
 8005b96:	446e      	add	r6, sp
 8005b98:	460c      	mov	r4, r1
 8005b9a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005b9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005ba2:	462e      	mov	r6, r5
 8005ba4:	42b2      	cmp	r2, r6
 8005ba6:	f101 0101 	add.w	r1, r1, #1
 8005baa:	463d      	mov	r5, r7
 8005bac:	d9ee      	bls.n	8005b8c <__utoa+0x40>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	545a      	strb	r2, [r3, r1]
 8005bb2:	1919      	adds	r1, r3, r4
 8005bb4:	1aa5      	subs	r5, r4, r2
 8005bb6:	42aa      	cmp	r2, r5
 8005bb8:	dae3      	bge.n	8005b82 <__utoa+0x36>
 8005bba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005bbe:	780e      	ldrb	r6, [r1, #0]
 8005bc0:	7006      	strb	r6, [r0, #0]
 8005bc2:	3201      	adds	r2, #1
 8005bc4:	f801 5901 	strb.w	r5, [r1], #-1
 8005bc8:	e7f4      	b.n	8005bb4 <__utoa+0x68>
 8005bca:	bf00      	nop
 8005bcc:	080069bc 	.word	0x080069bc

08005bd0 <memset>:
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4d0d      	ldr	r5, [pc, #52]	@ (8005c18 <__libc_init_array+0x38>)
 8005be4:	4c0d      	ldr	r4, [pc, #52]	@ (8005c1c <__libc_init_array+0x3c>)
 8005be6:	1b64      	subs	r4, r4, r5
 8005be8:	10a4      	asrs	r4, r4, #2
 8005bea:	2600      	movs	r6, #0
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8005c20 <__libc_init_array+0x40>)
 8005bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8005c24 <__libc_init_array+0x44>)
 8005bf4:	f000 f818 	bl	8005c28 <_init>
 8005bf8:	1b64      	subs	r4, r4, r5
 8005bfa:	10a4      	asrs	r4, r4, #2
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	080069ec 	.word	0x080069ec
 8005c1c:	080069ec 	.word	0x080069ec
 8005c20:	080069ec 	.word	0x080069ec
 8005c24:	080069f0 	.word	0x080069f0

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
